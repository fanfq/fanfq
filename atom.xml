<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fred&#39;s Blog</title>
  
  <subtitle>Quick notes</subtitle>
  <link href="https://blog.fanfq.com/atom.xml" rel="self"/>
  
  <link href="https://blog.fanfq.com/"/>
  <updated>2022-04-08T08:24:42.000Z</updated>
  <id>https://blog.fanfq.com/</id>
  
  <author>
    <name>Fred范方青</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用frp进行内网穿透</title>
    <link href="https://blog.fanfq.com/dev/frp_setup_guideline.html"/>
    <id>https://blog.fanfq.com/dev/frp_setup_guideline.html</id>
    <published>2022-04-09T07:09:08.000Z</published>
    <updated>2022-04-08T08:24:42.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>去年有整理过《jenkins自动化构建最佳实践》，其中提到内网穿透的方案，那是阿里出的一个临时工具，实际上并不好用。因为他仅仅是个临时方案，超过一定时长会掉线。</p><p>由于特定的场景，我有台闲置的 MacBook Pro 处于长期开机中，主要用于编译的任务。</p><p>今天大致的介绍下我是如何使用frp的，frp可以理解整一个代理软件，分为服务器端和客户端。像我这个需求就必须需要一台带外网IP的服务器，在这台服务器进行 frps 的相关配置，而在macbook上进行 frpc 相关配置。</p><p><a href="https://github.com/fatedier/frp">frp</a></p><h3 id="服务器端配置-frps-ini"><a href="#服务器端配置-frps-ini" class="headerlink" title="服务器端配置 frps.ini"></a>服务器端配置 frps.ini</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 8000</span><br><span class="line">max_pool_count = 20</span><br><span class="line">allow_ports = 2000-3000,6081,4000-50000</span><br><span class="line">dashboard_port = 7500</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = 123456</span><br><span class="line">token = 123456</span><br><span class="line">authentication_timeout = 90000</span><br></pre></td></tr></table></figure><p>启动方式：<code>frps -c ./frps.ini</code></p><ol><li><code>token = 123456</code> 这个参数比较重要，要与客户端一致，用于验证。</li><li>几个开启服务器端的 <code>7000</code>，<code>8000</code>，<code>7500</code> 以及客户端需要用到的端口。</li></ol><h3 id="客户端配置-frc-ini"><a href="#客户端配置-frc-ini" class="headerlink" title="客户端配置 frc.ini"></a>客户端配置 frc.ini</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#frc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = 服务器端IP</span><br><span class="line">server_port = 7000</span><br><span class="line">token = 123456</span><br><span class="line">#tls_enable = true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#公网访问内部web服务器以http方式</span><br><span class="line">[web00]</span><br><span class="line">type = http</span><br><span class="line">local_port = 8000</span><br><span class="line">custom_domains = xxx.fanfq.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动方式：<code>frpc -c ./frpc.ini</code></p><ol><li>通过 <code>http://服务器端IP:7500</code> 即可访问daskbord 查阅当前端口使用情况。</li><li>配置DNS将指定域名指向服务器端的,随后外网就可以通过 <code>http://xxx.fanfq.com:8000</code>，访问客户端 <code>8000</code> 端口。</li></ol><h3 id="多客户端，多端口配置"><a href="#多客户端，多端口配置" class="headerlink" title="多客户端，多端口配置"></a>多客户端，多端口配置</h3><p>如果此时有另外一台客户端也需要做内网穿透，那么如下配置新的客户端即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#frc.ini</span><br><span class="line">[common]</span><br><span class="line">server_addr = 服务器IP</span><br><span class="line">server_port = 7000</span><br><span class="line">token = 123456</span><br><span class="line">#tls_enable = true</span><br><span class="line"></span><br><span class="line">#公网访问内部web服务器以http方式</span><br><span class="line">[web01]</span><br><span class="line">type = tcp</span><br><span class="line">local_port = 8083</span><br><span class="line">custom_domains = xxx.fanfq.com</span><br><span class="line">remote_port = 8083</span><br><span class="line"></span><br><span class="line">[web02]</span><br><span class="line">type = tcp</span><br><span class="line">local_port = 8084</span><br><span class="line">custom_domains = xxx.fanfq.com</span><br><span class="line">remote_port = 8084</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中通讯协议采用 <code>type = tcp</code>，而 <code>remote_port = 8083</code>是指告诉服务器端通过此端口访问。<br>那么此时通过  <code>http://xxx.fanfq.com:8083</code>，<code>http://xxx.fanfq.com:8084</code> 即可访问此客户端了。</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ol><li><p><code>https</code>，<code>反向代理</code>支持。比如通过 <code>https://xxx.fanfq.com</code> - &gt;<code>http://xxx.fanfq.com:8083</code> 在服务器端通过 <code>nginx</code>配置证书以及反向代理即可</p></li><li><p>开机自启动，这个方式太多了就不多介绍了。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="dev" scheme="https://blog.fanfq.com/categories/dev/"/>
    
    
    <category term="居家办公" scheme="https://blog.fanfq.com/tags/%E5%B1%85%E5%AE%B6%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title>当居家办公成为常态，我是如何升级家庭网络的，低成本5G网络全屋覆盖</title>
    <link href="https://blog.fanfq.com/blog_/home_network_upgrade.html"/>
    <id>https://blog.fanfq.com/blog_/home_network_upgrade.html</id>
    <published>2022-04-08T05:22:47.000Z</published>
    <updated>2022-04-08T05:32:09.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我家升级宽带了，我家原本是300mb的入户光纤，到今年刚好合约到期。在没有追加成本的情况下，居然免费升级到1000mb了…</p><p>还记得吗？去年8月份，我升级了家里的主路由器，是一颗搭载J4125 CPU的软路由，其性能完全能够胜任我的日常需求，最重要它还是一颗低功耗的CPU日常待机也就10w左右。</p><p>比较可惜的是J4125作为Intel家的mobil级别的芯片，其并不支持AVX指令集，导致我不能部署一些深度学习的框架。这也算是一个小小的遗憾，不过综合考虑这款CPU仍旧是比较符合我的需求的。</p><p>下面这篇文章是我详细讲述我是如何压榨J4125这款软路由性能的：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI3NzM1MDgxNA==&mid=2247483937&idx=1&sn=3193f09787894a5c104ad7cd99eecef7&chksm=eb66d2d0dc115bc6b90fe3db8860cfd2e4807e194680ab0b2b6543c6929fe6e2cb66e3c8e3bc&token=957463482&lang=zh_CN#rd">《伪极客家庭组网方案，什么叫 all in one 路由器》</a></p><p>此篇文章中，有些错误的观点纠正一下。</p><p>其中提到 “虚拟网口与直通性能区别不大”，实际上并非如此。经过测试非直通状态下，网口的带宽只有100mb，直通后可达到1000mb。</p><p>同时还要补充一下，一次偶然发现掉速的问题。网线插上软路由后网速是1000mb但过几天后就掉到100mb了，此时重新插拔一下网线又会变成1000mb，如此反复。后来换了新的跳线之后就没有发生过此现象。所以线材也是比较重要的，跳线的选择最好是购买接口已经封装好的那种成品，如果内网不是万兆的带宽超5类双绞线足够了。</p><p>不得不提，我看到很多自媒体鼓励大家升级到超6，甚至7类双绞线。在我看来完全没有必要，超5类双绞线再打10年完全没有问题。还记得10多年前我还在上大学的时候，当时提出的口号是百兆进桌面，10多年过去了我们的内网带宽普遍在100/1000mb的带宽。而万兆带宽想要普及至少还需要个10年以上。</p><p>就像今天我想和大家分享的我家WIFI6 AP升级一样，WIFI 6路由器至少面世3年以上了，现在貌似都有WIFI 6E,WIFI 7等标准出来了。可我们大部分都在使用WIFI 5的路由器，甚至100mb带宽的老款路由器。其中也包括我，像我这种伪极客自居的也是刚刚才升级到WIFI 6路由器。</p><img src="https://cdn.fanfq.com/picgo/20220408132824.png?imageslim," class="" title="升级之前的网络拓扑"><p>在升级wifi6前我家网络拓扑大概是这样的，比较有趣的是仅仅书房的AP2是一个千兆的路由器的，其余的都是百兆的。因为他们的采购时间各不相同，只能最大程度的满足我个人的需求，确保的我的空间网络的最优化。</p><p>虽然这三个路由器采用中继的模式，但每次进入不同的区域都要手动的切换，这点我实在受不了，手动切换网络对其他家庭成员来说特别困惑，所以趁此宽带升级的机会顺便将家里的网络都做一次升级。</p><img src="https://cdn.fanfq.com/picgo/20220408132744.png?imageslim," class="" title="升级之后的网络拓扑"><p>我的需求很明确，“具有较强的WIFI性能，支持1000mb的带宽，以及支持ap mesh组网”，所以其他的功能对我来说不是很重要，比如路由功能，因为在DHCP服务是由我的上级软路由完成的，而wifi6路由器仅仅当做AP使用提供wifi信号而已，这也是为什么我采用的是AP Mesh组网模式。</p><p>综上需求我大致看了下市面上单价比较符合我需求的wifi6路由器，后来定位小米的AX3200 和 TPLink AX5400，从价格和性能相比后我最终选择了 TPLink AX5400​。</p><img src="https://cdn.fanfq.com/picgo/20220408132652.jpeg?imageslim," class="" title="TPLink AX5400"><p>在此之前我从未用过TPLink的路由器，也不知道其到底怎么样。</p><p>截止到现在已经使用了一个月的TPLink AX5400，总体感觉还不错，mesh组网特点我就不多做介绍了，就”无线漫游”对我来说简直爽的起飞，比如我回家入户进入客厅此时连接的是客厅的路由器，当我走到主卧的时候，此时的信号已经衰减的很厉害了，此时会自动切换到主卧的路由器。所以现在我所有的设备只连接5G信号，目前基本满足5G信号全屋覆盖，即便在信号稍弱的房间带宽也能跑到300mb以上，信号好的区域能跑到700mb以上，160mhz的客户端应该能够跑满1000mb带宽。</p><p>总结：</p><ol><li>只要在同一个局域网内就能mesh组网，当然是有线局域网最好。</li><li>推荐通过交换机分发网络，这样内网传输的效率更高效。</li><li>如果你家的网络拓扑和我家类似，强烈推荐ap mesh组网，入门级wifi6路由器即可。</li><li>现在路由器体积越来越大，放置在某个地方真的很突兀，不方便也不美观。以后再装修我一定会在天花板里面布线，将路由器等其他智能家居的产品藏在天花板里面。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="blog_" scheme="https://blog.fanfq.com/categories/blog/"/>
    
    
    <category term="blog" scheme="https://blog.fanfq.com/tags/blog/"/>
    
    <category term="wifi6" scheme="https://blog.fanfq.com/tags/wifi6/"/>
    
    <category term="路由器" scheme="https://blog.fanfq.com/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    <category term="家庭网络" scheme="https://blog.fanfq.com/tags/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Flutter网络请求数据封装最佳实践</title>
    <link href="https://blog.fanfq.com/dev/flutter_restful_apis_the_best_practices.html"/>
    <id>https://blog.fanfq.com/dev/flutter_restful_apis_the_best_practices.html</id>
    <published>2021-11-19T03:12:01.000Z</published>
    <updated>2022-04-08T02:03:23.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>实在学不动了，现在主流的java jdk版本应该是11以上了，可我仍旧使用jdk8。做为从jdk 1.5也就是jdk5一直走过来的老javaer真的不想学了，拖欠的太多了，很多新特性都不太清楚。</p><p>springboot大礼包也逐渐放弃java8的支持，已经官宣springboot3，java 17 将成为未来主流版本。</p><p>实际上版本的升级对我这种独立开发者也还好，成本并不是很高，只是我不想动。我只追求代码能跑，运行稳定即可。</p><p>从2021年开始，我逐渐将我的手机客户端程序尽可能的采用flutter开发，跨平台开发对来我来说尤其的重要，特别是针对UI层面的。</p><p>你很难想象我的代码版本库到底有都少个分支，特别是安卓版本早期一个渠道一个分支，每个渠道都要对接本渠道的sdk。我不得不维护一个自己整合个渠道的sdk，从而面对不同的渠道，从而减少分支版本期减轻代码的维护成本。直到现在我基本放弃了国内的应用市场，更多的经历只维护googleplay的版本。</p><p>之所以采用flutter开发客户端项目，一方面其跨平台的能力之外，另外就是新的开发语言 Dart，你想想看安卓目前有java 和 Kotlin，iOS 有 Object-C， swift，代码维护起来有点烦杂，特别是我这种单兵作战的独立开发者而言。所以这也是我为什么会逐渐采用flutter开发的主要原因。</p><p>未来的日子里，我会逐步整理我在开发过程中所使用的代码片段。</p><h3 id="base-req-params-dart"><a href="#base-req-params-dart" class="headerlink" title="base_req_params.dart"></a><code>base_req_params.dart</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">abstract class BaseReqParams &#123;</span><br><span class="line"></span><br><span class="line">  String method = &quot;POST&quot;; //default method</span><br><span class="line"></span><br><span class="line">  String getUrl(); //baseUrl+&quot;/sdk/init&quot;,here is &quot;/sdk/init&quot; without host</span><br><span class="line"></span><br><span class="line">  Map&lt;String, dynamic&gt; getBody();//post json body</span><br><span class="line"></span><br><span class="line">  String getMethod()&#123;</span><br><span class="line">    return method;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="base-resp-params-dart"><a href="#base-resp-params-dart" class="headerlink" title="base_resp_params.dart"></a><code>base_resp_params.dart</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">abstract class BaseRespHandler &#123;</span><br><span class="line">  BaseRespHandler fromJson(Map&lt;String, dynamic&gt; json);</span><br><span class="line">  Map&lt;String, dynamic&gt;? toJson();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="base-service-dar"><a href="#base-service-dar" class="headerlink" title="base_service.dar"></a><code>base_service.dar</code></h3><p>主网络请求类，所有的网络请求都是从这里类发出，并完成回调。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &#x27;dart:convert&#x27;;</span><br><span class="line">import &#x27;package:dio/dio.dart&#x27;;</span><br><span class="line">import &#x27;package:flutter/material.dart&#x27;;</span><br><span class="line">import &#x27;package:flutter_demo_v1/base/base_header_params.dart&#x27;;</span><br><span class="line">import &#x27;package:flutter_demo_v1/utils/flog.dart&#x27;;</span><br><span class="line">import &#x27;base_req_params.dart&#x27;;</span><br><span class="line"></span><br><span class="line">// class Session &#123;</span><br><span class="line">//   static Map&lt;String, dynamic&gt; headers = &#123;&#125;;</span><br><span class="line">//   static RespSignParams signParams;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">abstract class BaseService&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">  static const String domainName = &quot;http://192.168.3.167:8880&quot;;</span><br><span class="line">  final String baseUrl = domainName;</span><br><span class="line"></span><br><span class="line">  final int success = 200;</span><br><span class="line">  Dio dio = Dio();</span><br><span class="line"></span><br><span class="line">  BaseService(BuildContext context, &#123;bool isShowLoading = true&#125;) &#123;</span><br><span class="line">    if (isShowLoading) &#123;</span><br><span class="line">      //loading = new Loading();</span><br><span class="line">      //loading.init(context);</span><br><span class="line">    &#125;</span><br><span class="line">    // dio.interceptors.add(CookieManager(cookieJar));</span><br><span class="line">    dio.options.baseUrl = baseUrl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Options getOptions() &#123;</span><br><span class="line">    return Options(</span><br><span class="line">        headers: getHeaders(),</span><br><span class="line">        followRedirects: false,</span><br><span class="line">        responseType: ResponseType.json,</span><br><span class="line">        contentType: Headers.jsonContentType,</span><br><span class="line">        validateStatus: (status) &#123;</span><br><span class="line">          return status &lt; 500;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  ///http请求的头的封装，根据实际业务进行扩展</span><br><span class="line">  Map&lt;String, dynamic&gt; getHeaders() &#123;</span><br><span class="line">    HeaderParams params = HeaderParams(3, &quot;eyJ1aWQiOjMsInRzIjoxLjYzNzIyNjc4ODU0MTkyNjVFMTJ9.1f3d833c8782ab26d62aeb19abce67e0&quot;);</span><br><span class="line">    Map&lt;String, dynamic&gt; newHeaders = params.toData();</span><br><span class="line">    return newHeaders;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ///post json</span><br><span class="line">  void postByJson(&#123;required BaseReqParams params, required Function(Map&lt;String, dynamic&gt; data) onSuccess, required Function(int code, String msg) onFailed&#125;) async &#123;</span><br><span class="line">    // if (loading != null) &#123;</span><br><span class="line">    //   loading.show();</span><br><span class="line">    // &#125;</span><br><span class="line">    try &#123;</span><br><span class="line"></span><br><span class="line">      dlog(&quot;请求: $&#123;dio.options.baseUrl&#125;$&#123;params.getUrl()&#125;&quot;);</span><br><span class="line">      dlog(&quot;body: $&#123;params.getBody()&#125;&quot;);</span><br><span class="line">      dlog(&quot;请求头: $&#123;getOptions().headers&#125;&quot;);</span><br><span class="line"></span><br><span class="line">      var response = await dio.post(</span><br><span class="line">          params.getUrl(),</span><br><span class="line">          data:params.getBody(),</span><br><span class="line">          options: getOptions());</span><br><span class="line"></span><br><span class="line">      //http response statuscode=200 代表服务器正常响应</span><br><span class="line">      if (response.statusCode == 200) &#123;</span><br><span class="line">          var printString = json.encode(response.data);</span><br><span class="line">          dlog(&quot;返回: $printString&quot;);</span><br><span class="line"></span><br><span class="line">          Map&lt;String, dynamic&gt; rest = json.decode(printString);</span><br><span class="line"></span><br><span class="line">          var code = rest[&#x27;code&#x27;];</span><br><span class="line">          var msg = rest[&#x27;msg&#x27;];</span><br><span class="line"></span><br><span class="line">          dlog(&#x27;[code]: $&#123;rest[&#x27;code&#x27;]&#125;&#x27;);</span><br><span class="line">          dlog(&#x27;[msg]: $&#123;rest[&#x27;msg&#x27;]&#125;&#x27;);</span><br><span class="line">          dlog(&#x27;[data]: $&#123;rest[&#x27;data&#x27;]&#125;&#x27;);</span><br><span class="line"></span><br><span class="line">          if(code == 200)&#123;</span><br><span class="line">            //服务器返回json 结构体code=200 代表业务逻辑正常</span><br><span class="line">            onSuccess(rest);</span><br><span class="line">          &#125;else&#123;</span><br><span class="line">            //服务器返回json 结构体code!=200 代表业务不正常，需要单独处理</span><br><span class="line">            onFailed(code,msg);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        ///MORE INFO</span><br><span class="line">        //http response statuscode=200 代表服务器响应不正常，如服务器宕机，网络波段等，比较常见的如 400:badreq，404:notfund，500:internal server err</span><br><span class="line">        //只要业务逻辑正常，通常都是200；返回statuscode是比较标准的做法，也是restful apis践行的做法，但是在我们的开发过程中除特殊情况，通常都是返回200.</span><br><span class="line">        //这里已经捕获，并通过`onFailed`回调，可能比较规范的做法需要增加一个 `onError`回调，单独处理 statuscode！=200 的异常情况</span><br><span class="line">        elog(&quot;response.statusCode!=200, is $&#123;response.statusCode&#125;, $&#123;response.toString()&#125;&quot;);</span><br><span class="line">        onFailed(response.statusCode, json.decode(response.toString())[&#x27;msg&#x27;]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; on DioError catch(e) &#123;</span><br><span class="line">      printError(e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">      // if (loading != null) &#123;</span><br><span class="line">      //   loading.dismiss();</span><br><span class="line">      // &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void printError(DioError e) &#123;</span><br><span class="line">    // The request was made and the server responded with a status code</span><br><span class="line">    // that falls out of the range of 2xx and is also not 304.</span><br><span class="line">    if(e.response != null) &#123;</span><br><span class="line">      elog(e.response.data);</span><br><span class="line">      elog(e.response.headers);</span><br><span class="line">      elog(e.response.request);</span><br><span class="line">    &#125; else&#123;</span><br><span class="line">      // Something happened in setting up or sending the request that triggered an Error</span><br><span class="line">      elog(e.request);</span><br><span class="line">      elog(e.message);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="sdk-model-dart"><a href="#sdk-model-dart" class="headerlink" title="sdk_model.dart"></a><code>sdk_model.dart</code></h3><p>请求消息数据封装，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import &#x27;package:flutter_demo_v1/base/base_req_params.dart&#x27;;</span><br><span class="line">import &#x27;package:flutter_demo_v1/base/base_resp_params.dart&#x27;;</span><br><span class="line"></span><br><span class="line">/// req json data</span><br><span class="line">// &#123;&quot;packageName&quot;:&quot;包名&quot;,&quot;channelName&quot;:&quot;渠道名&quot;,&quot;versionCode&quot;:1,&quot;versionName&quot;:&quot;版本名&quot;&#125;</span><br><span class="line">class SDKInitReqData extends BaseReqParams&#123;</span><br><span class="line"></span><br><span class="line">  String packageName;</span><br><span class="line">  String channelName;</span><br><span class="line">  int versionCode;</span><br><span class="line">  String versionName;</span><br><span class="line"></span><br><span class="line">  SDKInitReqData(&#123;required this.packageName,required this.channelName,required this.versionCode,required this.versionName&#125;);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Map&lt;String, dynamic&gt; getBody() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      &quot;packageName&quot;:packageName,</span><br><span class="line">      &quot;channelName&quot;:channelName,</span><br><span class="line">      &quot;versionCode&quot;:versionCode,</span><br><span class="line">      &quot;versionName&quot;:versionName,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  String getUrl() &#123;</span><br><span class="line">    return &quot;/test/reqHeadCheck&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// resp json data</span><br><span class="line">// &#123;</span><br><span class="line">//   &quot;code&quot;: 200,</span><br><span class="line">//   &quot;msg&quot;: &quot;ok&quot;,</span><br><span class="line">//   &quot;data&quot;: &#123;</span><br><span class="line">//     &quot;versionCode&quot;: 1,</span><br><span class="line">//     &quot;versionName&quot;: &quot;版本名&quot;,</span><br><span class="line">//     &quot;packageName&quot;: &quot;包名&quot;,</span><br><span class="line">//     &quot;channelName&quot;: &quot;渠道名&quot;,</span><br><span class="line">//     &quot;id&quot;: 5,</span><br><span class="line">//     &quot;upd&quot;: &#123;</span><br><span class="line">//       &quot;status&quot;: 0,</span><br><span class="line">//       &quot;versionCode&quot;: 0,</span><br><span class="line">//       &quot;apkSize&quot;: 0</span><br><span class="line">//     &#125;,</span><br><span class="line">//     &quot;cfg&quot;: &#123;&quot;ad&quot;:false,&quot;login&quot;:true,&quot;agree&quot;:true,&quot;wx&quot;:&quot;xxx&quot;&#125;</span><br><span class="line">//   &#125;</span><br><span class="line">// &#125;</span><br><span class="line">class SDKInitRespData extends BaseRespHandler&#123;</span><br><span class="line">  late int versionCode;</span><br><span class="line">  late String versionName;</span><br><span class="line">  late String packageName;</span><br><span class="line">  late String channelName;</span><br><span class="line"></span><br><span class="line">  late Upd upd;</span><br><span class="line">  late Cfg cfg;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  SDKInitRespData fromJson(Map&lt;String, dynamic&gt; json) &#123;</span><br><span class="line">    versionCode = json[&#x27;versionCode&#x27;];</span><br><span class="line">    versionName = json[&#x27;versionName&#x27;];</span><br><span class="line">    packageName = json[&#x27;packageName&#x27;];</span><br><span class="line">    channelName = json[&#x27;channelName&#x27;];</span><br><span class="line"></span><br><span class="line">    upd = Upd().fromJson(json[&#x27;upd&#x27;]);</span><br><span class="line">    cfg = Cfg().fromJson(json[&#x27;cfg&#x27;]);</span><br><span class="line"></span><br><span class="line">    return this;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Map&lt;String, dynamic&gt;? toJson() &#123;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Upd extends BaseRespHandler&#123;</span><br><span class="line">  late int status;</span><br><span class="line">  late int versionCode;</span><br><span class="line">  late int apkSize;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Upd fromJson(Map&lt;String, dynamic&gt; json) &#123;</span><br><span class="line">    status = json[&#x27;status&#x27;];</span><br><span class="line">    versionCode = json[&#x27;versionCode&#x27;];</span><br><span class="line">    apkSize = json[&#x27;apkSize&#x27;];</span><br><span class="line">    return this;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Map&lt;String, dynamic&gt;? toJson() &#123;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Cfg extends BaseRespHandler&#123;</span><br><span class="line">  late bool ad;</span><br><span class="line">  late bool login;</span><br><span class="line">  late bool agree;</span><br><span class="line">  late String wx;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Cfg fromJson(Map&lt;String, dynamic&gt; json) &#123;</span><br><span class="line">    ad = json[&#x27;ad&#x27;];</span><br><span class="line">    login = json[&#x27;login&#x27;];</span><br><span class="line">    agree = json[&#x27;agree&#x27;];</span><br><span class="line">    wx = json[&#x27;wx&#x27;];</span><br><span class="line">    return this;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Map&lt;String, dynamic&gt;? toJson() &#123;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="dev" scheme="https://blog.fanfq.com/categories/dev/"/>
    
    
    <category term="架构" scheme="https://blog.fanfq.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="design" scheme="https://blog.fanfq.com/tags/design/"/>
    
    <category term="jenkins" scheme="https://blog.fanfq.com/tags/jenkins/"/>
    
    <category term="android" scheme="https://blog.fanfq.com/tags/android/"/>
    
    <category term="flutter" scheme="https://blog.fanfq.com/tags/flutter/"/>
    
    <category term="ios" scheme="https://blog.fanfq.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>Flutter日志工具类</title>
    <link href="https://blog.fanfq.com/dev/flutter_logs_utils.html"/>
    <id>https://blog.fanfq.com/dev/flutter_logs_utils.html</id>
    <published>2021-11-17T03:12:01.000Z</published>
    <updated>2021-11-19T01:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// flog.dart</span><br><span class="line">// ilog(&quot;msg info&quot;); 调用方式</span><br><span class="line"></span><br><span class="line">import &#x27;package:flutter/foundation.dart&#x27;;</span><br><span class="line">import &#x27;package:stack_trace/stack_trace.dart&#x27;;</span><br><span class="line"></span><br><span class="line">const String _tag = &quot;fred_&quot;;</span><br><span class="line">const bool _logOpen = true;</span><br><span class="line"></span><br><span class="line">enum FLogMode &#123;</span><br><span class="line">  debug,    // 💚 DEBUG</span><br><span class="line">  warning,  // 💛 WARNING</span><br><span class="line">  info,     // 💙 INFO</span><br><span class="line">  error,    // ❤️ ERROR</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void _log(dynamic msg, FLogMode mode)&#123;</span><br><span class="line">  if (kReleaseMode || _logOpen == false) &#123; // release 模式不打印</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  var chain = Chain.current(); // Chain.forTrace(StackTrace.current);</span><br><span class="line">  // 将 core 和 flutter 包的堆栈合起来（即相关数据只剩其中一条）</span><br><span class="line">  chain = chain.foldFrames((frame) =&gt; frame.isCore || frame.package == &quot;flutter&quot;);</span><br><span class="line">  // 取出所有信息帧</span><br><span class="line">  final frames = chain.toTrace().frames;</span><br><span class="line"></span><br><span class="line">  // 找到当前函数的信息帧</span><br><span class="line">  final idx;</span><br><span class="line"></span><br><span class="line">  var modeStr = &quot;&quot;;</span><br><span class="line">  switch(mode) &#123;</span><br><span class="line">    case FLogMode.debug:</span><br><span class="line">      modeStr = &quot;💚 DEBUG&quot;;</span><br><span class="line">      idx = frames.indexWhere((element) =&gt; element.member == &quot;dlog&quot;);</span><br><span class="line">      break;</span><br><span class="line">    case FLogMode.warning:</span><br><span class="line">      modeStr = &quot;💛 WARNING&quot;;</span><br><span class="line">      idx = frames.indexWhere((element) =&gt; element.member == &quot;wlog&quot;);</span><br><span class="line">      break;</span><br><span class="line">    case FLogMode.info:</span><br><span class="line">      modeStr = &quot;💙 INFO&quot;;</span><br><span class="line">      idx = frames.indexWhere((element) =&gt; element.member == &quot;ilog&quot;);</span><br><span class="line">      break;</span><br><span class="line">    case FLogMode.error:</span><br><span class="line">      modeStr = &quot;❤️ ERROR&quot;;</span><br><span class="line">      idx = frames.indexWhere((element) =&gt; element.member == &quot;elog&quot;);</span><br><span class="line">      break;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (idx == -1 || idx+1 &gt;= frames.length) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  // 调用当前函数的函数信息帧</span><br><span class="line">  final frame = frames[idx+1];</span><br><span class="line"></span><br><span class="line">  print(&quot;$_tag$&#123;frame.uri.toString().split(&quot;/&quot;).last&#125;($&#123;frame.line&#125;) :: $modeStr  - $msg &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void dlog(dynamic msg, &#123; FLogMode mode = FLogMode.debug &#125;) &#123;</span><br><span class="line">  _log(msg, mode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void elog(dynamic msg, &#123; FLogMode mode = FLogMode.error &#125;) &#123;</span><br><span class="line">  _log(msg, mode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ilog(dynamic msg, &#123; FLogMode mode = FLogMode.info &#125;) &#123;</span><br><span class="line">  _log(msg, mode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void wlog(dynamic msg, &#123; FLogMode mode = FLogMode.warning &#125;) &#123;</span><br><span class="line">  _log(msg, mode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="dev" scheme="https://blog.fanfq.com/categories/dev/"/>
    
    
    <category term="架构" scheme="https://blog.fanfq.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="design" scheme="https://blog.fanfq.com/tags/design/"/>
    
    <category term="jenkins" scheme="https://blog.fanfq.com/tags/jenkins/"/>
    
    <category term="android" scheme="https://blog.fanfq.com/tags/android/"/>
    
    <category term="flutter" scheme="https://blog.fanfq.com/tags/flutter/"/>
    
    <category term="ios" scheme="https://blog.fanfq.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>jenkins自动化构建最佳实践 for Android</title>
    <link href="https://blog.fanfq.com/%E6%9E%B6%E6%9E%84/jenkins_auto_distribute_for_android_the_best_practices.html"/>
    <id>https://blog.fanfq.com/%E6%9E%B6%E6%9E%84/jenkins_auto_distribute_for_android_the_best_practices.html</id>
    <published>2021-11-14T03:12:01.000Z</published>
    <updated>2021-11-16T08:28:18.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="需求"><a href="#需求" class="headerlink" title="需求:"></a>需求:</h3><p>每个人的需求可能不太一样，我的需求比较简单，因为我是一个人前后端全栈开发，目前不涉及到研发团队部分所以工作环境比较简单。</p><p>但是分发的工作不是我去做的，特别是针对国内的各大平台上架事宜，是由我的合作伙伴去做。另外就是外包活接的比较多，给甲方发包也比较频繁。</p><p>曾经我的发包模式，就是将apk打个压缩包，然后发群里，各种项目交叉发包和版本追溯也确实有点烦人。</p><p>因此我不得不花点时间去配置一个自动化构建系统，以解决我当前的混乱的发布流程。</p><h3 id="方案"><a href="#方案" class="headerlink" title="方案:"></a>方案:</h3><p>我使用<code>war</code>的方式部署<code>jenkins</code>以便后期无缝转移其他平台。</p><p><a href="https://www.jenkins.io/doc/book/installing/war-file/">安装教程</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://ftp-nyc.osuosl.org/pub/jenkins/war-stable/latest/jenkins.war</span><br><span class="line">java -jar jenkins.war --httpPort=8000</span><br></pre></td></tr></table></figure><p>注意：默认情况下工作目录在 <code>~/.jenkins</code> ，更改默认工作路径需要配置个环境变量，然后再重启下服务即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JENKINS_HOME=/home/JenkinsWorkspace</span><br></pre></td></tr></table></figure><h4 id="需要用到的插件"><a href="#需要用到的插件" class="headerlink" title="需要用到的插件"></a>需要用到的插件</h4><blockquote><p>Maven Integration 构建maven项目用的<br>Email Extension 构建完成发送邮件通知用<br>Post build task 构建完成执行脚本用的<br>Role-based Authorization Strategy 配置用户项目访问权限用的</p></blockquote><p>具体的我找到两篇教程供参考</p><p>Jenkins <a href="https://wiki.eryajf.net/pages/350.html#editable-email-notification-%E5%90%8D%E7%A7%B0-%E5%8F%AF%E7%BC%96%E8%BE%91%E7%9A%84%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5">邮箱配置</a><br>Jenkins <a href="https://www.cnblogs.com/mengyu/p/7744293.html">权限配置</a></p><p>*重点说下邮件模板的配置，我的原则是<code>Jenkins</code>的配置不能有侵入性，项目工程既能<code>Jenkins</code>编译同时也兼顾本地编译或者其他编译环境。</p><p>下面解决如何在构建通知邮件中，获取项目的版本信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">在gradle脚本中，添加日志输出：</span><br><span class="line"></span><br><span class="line">println(&quot;*****************************************************&quot;)</span><br><span class="line">println(&quot;vSTARTSTART&quot;)</span><br><span class="line">println(&quot;v&quot;+versionName+&quot;(&quot;+versionCode+&quot;)&quot;)</span><br><span class="line">println(&quot;vENDEND&quot;)</span><br><span class="line">println(&quot;STARTSTART&quot;)</span><br><span class="line">println(&quot;appName：xxx&quot;)</span><br><span class="line">println(&quot;packageName：&quot;+applicationId)</span><br><span class="line">println(&quot;versionCode：&quot;+versionCode)</span><br><span class="line">println(&quot;versionName：&quot;+versionName)</span><br><span class="line">println(&quot;gitHash：&quot;+gitHash())</span><br><span class="line">println(&quot;buildTime：&quot;+buildTime())</span><br><span class="line">println(&quot;notes：N/A&quot;)</span><br><span class="line">println(&quot;ENDEND&quot;)</span><br><span class="line">println(&quot;*****************************************************&quot;)</span><br><span class="line"></span><br><span class="line">Jenkins邮件正文中通过正则匹配的方式截取log输出：</span><br><span class="line">$&#123;BUILD_LOG_EXCERPT, start =&quot;^STARTSTART&quot;, end =&quot;^ENDEND&quot;&#125; </span><br></pre></td></tr></table></figure><p>邮件模板主题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构建通知：xxx项目 $&#123;BUILD_LOG_EXCERPT, start =&quot;^vSTARTSTART&quot;, end =&quot;^vENDEND&quot;&#125; - Build # $BUILD_NUMBER - $BUILD_STATUS!</span><br></pre></td></tr></table></figure><p>邮件模板正文：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;$&#123;ENV, var=&quot;JOB_NAME&quot;&#125;-第$&#123;BUILD_NUMBER&#125;次构建日志&lt;/title&gt;&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body leftmargin=&quot;8&quot; marginwidth=&quot;0&quot; topmargin=&quot;8&quot; marginheight=&quot;4&quot; offset=&quot;0&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;table width=&quot;95%&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; style=&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td&gt;&lt;h2&gt;&lt;font color=&quot;#20B2AA&quot;&gt;构建结果 - $&#123;BUILD_STATUS&#125;&lt;/font&gt;&lt;/h2&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--版本发布:--&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;b&gt;&lt;font color=&quot;#0B610B&quot;&gt;版本发布:&lt;/font&gt;&lt;/b&gt;</span><br><span class="line">&lt;hr size=&quot;2&quot; width=&quot;100%&quot; align=&quot;center&quot; /&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">$&#123;BUILD_LOG_EXCERPT, start =&quot;^STARTSTART&quot;, end =&quot;^ENDEND&quot;&#125; </span><br><span class="line">下载链接(内网)：&lt;a href=&quot;$&#123;BUILD_URL&#125;&quot;&gt;$&#123;BUILD_URL&#125;&lt;/a&gt;</span><br><span class="line">下载链接(外网)：&lt;a href=&quot;http://***/$&#123;BUILD_NUMBER&#125;/&quot;&gt;http://***/$&#123;BUILD_NUMBER&#125;/&lt;/a&gt;</span><br><span class="line">&lt;/pre&gt;          </span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 构建信息:--&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td&gt;</span><br><span class="line">    &lt;b&gt;&lt;font color=&quot;#0B610B&quot;&gt;构建信息:&lt;/font&gt;&lt;/b&gt;</span><br><span class="line">    &lt;hr size=&quot;2&quot; width=&quot;100%&quot; align=&quot;center&quot; /&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;项目名称&amp;nbsp;：&amp;nbsp;$&#123;PROJECT_NAME&#125;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;构建编号&amp;nbsp;：&amp;nbsp;$&#123;BUILD_NUMBER&#125;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;Git&amp;nbsp;branch：&amp;nbsp;$&#123;GIT_BRANCH&#125;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;Git&amp;nbsp;revision：&amp;nbsp;$&#123;GIT_REVISION, length=7&#125;  &amp;nbsp; full: $&#123;GIT_REVISION&#125;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;发布者：&amp;nbsp;$&#123;CAUSE&#125;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;构建日志：&amp;nbsp;&lt;a href=&quot;$&#123;BUILD_URL&#125;console&quot;&gt;$&#123;BUILD_URL&#125;console&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;构建&amp;nbsp;&amp;nbsp;Url&amp;nbsp;：&amp;nbsp;&lt;a href=&quot;$&#123;BUILD_URL&#125;&quot;&gt;$&#123;BUILD_URL&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;工作目录&amp;nbsp;：&amp;nbsp;&lt;a href=&quot;$&#123;PROJECT_URL&#125;ws&quot;&gt;$&#123;PROJECT_URL&#125;ws&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;项目&amp;nbsp;&amp;nbsp;Url&amp;nbsp;：&amp;nbsp;&lt;a href=&quot;$&#123;PROJECT_URL&#125;&quot;&gt;$&#123;PROJECT_URL&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--提交信息--&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td&gt;&lt;b&gt;&lt;font color=&quot;#0B610B&quot;&gt;Changes Since Last Successful Build:&lt;/font&gt;&lt;/b&gt;</span><br><span class="line">    &lt;hr size=&quot;2&quot; width=&quot;100%&quot; align=&quot;center&quot; /&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;历史变更记录 : &lt;a href=&quot;$&#123;PROJECT_URL&#125;changes&quot;&gt;$&#123;PROJECT_URL&#125;changes&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt; $&#123;CHANGES_SINCE_LAST_SUCCESS,reverse=true, format=&quot;Changes for Build #%n:&lt;br /&gt;%c&lt;br /&gt;&quot;,showPaths=true,changesFormat=&quot;&lt;pre&gt;[%a]&lt;br /&gt;%m&lt;/pre&gt;&quot;,pathFormat=&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;%p&quot;&#125;            &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--测试信息--&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td&gt;&lt;b&gt;&lt;font color=&quot;#0B610B&quot;&gt;Failed Test Results:&lt;/font&gt;&lt;/b&gt;</span><br><span class="line">    &lt;hr size=&quot;2&quot; width=&quot;100%&quot; align=&quot;center&quot; /&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td&gt;&lt;pre style=&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&quot;&gt;$FAILED_TESTS&lt;/pre&gt;</span><br><span class="line">        &lt;br /&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;td&gt;(本邮件是Jenkins构建项目完成之后自动下发的，请勿回复！)&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="构建机的选择"><a href="#构建机的选择" class="headerlink" title="构建机的选择"></a>构建机的选择</h4><p>构建机，这个比较重要，因为我有iOS编译需求，所以这里选择一台闲置的<code>macbook（mbp2012）</code>作为构建机器。这台电脑7*24为我服务，除了作为构建机使用外，还装了虚拟机也是我主要的本地测试环境，因此我升级了16g内存以及ssd，虽然有点老性能也基本够用我的原则就是只要能开机就一直用着。<br>备注：2012款的macbook已经不能当做iOS编译机使用了，因为新版的xcode需要macos11(bigsur)以上的版本才行，而macos11只支持2013款以后的机型。</p><h4 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h4><p><a href="https://developers.dingtalk.com/document/tutorial/create-a-robot?spm=a2q3p.21071111.0.0.6dd265ee9EUrKU">内网穿透</a> 由于是本地部署需要外网访问。偶然的机会我发现阿里提供了个免费的内网穿透工具，这个可以用于临时测试用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">如果你还没有公网域名，在本部分，你可以使用钉钉内网穿透工具，映射一个本地的公网域名使用。</span><br><span class="line"></span><br><span class="line">1.打开命令行工具，执行以下命令，下载内网穿透工具。</span><br><span class="line"></span><br><span class="line">git clone https://github.com/open-dingtalk/pierced.git</span><br><span class="line"></span><br><span class="line">2.执行以下命令，启动内网穿透。</span><br><span class="line"></span><br><span class="line">Windows执行以下命令：</span><br><span class="line"></span><br><span class="line">cd windows_64</span><br><span class="line">ding -config=ding.cfg -subdomain=abcde 8080</span><br><span class="line"></span><br><span class="line">MAC执行以下命令：</span><br><span class="line"></span><br><span class="line">cd mac_64</span><br><span class="line">chmod 777 ./ding</span><br><span class="line">./ding -config=./ding.cfg -subdomain=abcde 8080</span><br><span class="line"></span><br><span class="line">注意 启动内网穿透时，请不要直接使用abcde字符串，如果需要使用默认端口8080，需确保在同一内网环境下该字符串唯一且未重复使用，如果重复，启动后可能会出现访问端口不一致问题。</span><br><span class="line"></span><br><span class="line">3.启动完客户端后，你访问http://abcde.vaiwan.com/xxxxx都会映射到http://127.0.0.1:8080/xxxxx。</span><br><span class="line"></span><br><span class="line">4.重启后端服务。</span><br></pre></td></tr></table></figure><h3 id="结果与发布："><a href="#结果与发布：" class="headerlink" title="结果与发布："></a>结果与发布：</h3><p>发包流程可以根据实际情况去处理，同一个项目可以多拷贝几份构建ITEM以满足不同的需求，</p><p>比如 每日构建， 每次git提交构建，以及正式发包构建。等等。</p><p>由于我是单兵作战，所以只有发部新包的时候手动构建。这样只要在邮件列表的人就会收到以下邮件，然后根据需要再去下载即可。我只关注的我自己的工作流，至于别人的流程我并不关注。</p><img src="https://cdn.fanfq.com/picgo/20211115135623.png?imageslim," class="" title="构建结果邮件通知"><ul><li>版本命名</li></ul><table><thead><tr><th>versionCode</th><th>versionName</th></tr></thead><tbody><tr><td>211112(yyMMDD)</td><td>1.0.1(根据版本情况自定义)</td></tr></tbody></table><p><code>versionCode</code>. 客户端是不可见的，主要用于版本升级，比如热更强更，以及上架的时候也会要求；主要针对研发标识版本的。</p><p><code>versionName</code>. 客户端可见，通常更有意义的版本表述的方式，如 <code>v1.1 beta</code> 等；主要是为了方便传播与表述。我也习惯用 <code>1.0.yy.mmDD</code> 这种方式定义版本名称。 </p><img src="https://cdn.fanfq.com/picgo/20211115135738.png?imageslim," class="" title="设定job只读权限后的账户访问"><ul><li>包体命名</li></ul><p><code>app-com.xxx-360-release-v1.0.1(211028)-20211115-162621-.apk</code></p><table><thead><tr><th>app</th><th>com.xxx</th><th>360</th><th>release</th><th>v1.0.1(211028)</th><th>20211115-162621</th></tr></thead><tbody><tr><td>app</td><td>包名</td><td>渠道名</td><td>正式包</td><td>版本名(版本号)</td><td>编译时间(yyyyMMDD-HHMMSS)</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="架构" scheme="https://blog.fanfq.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="https://blog.fanfq.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="design" scheme="https://blog.fanfq.com/tags/design/"/>
    
    <category term="jenkins" scheme="https://blog.fanfq.com/tags/jenkins/"/>
    
    <category term="android" scheme="https://blog.fanfq.com/tags/android/"/>
    
    <category term="distribute" scheme="https://blog.fanfq.com/tags/distribute/"/>
    
  </entry>
  
  <entry>
    <title>要么苟，要么滚！苟有苟道！</title>
    <link href="https://blog.fanfq.com/blog/%E8%A6%81%E4%B9%88%E8%8B%9F_%E8%A6%81%E4%B9%88%E6%BB%9A_%E8%8B%9F%E6%9C%89%E8%8B%9F%E9%81%93.html"/>
    <id>https://blog.fanfq.com/blog/%E8%A6%81%E4%B9%88%E8%8B%9F_%E8%A6%81%E4%B9%88%E6%BB%9A_%E8%8B%9F%E6%9C%89%E8%8B%9F%E9%81%93.html</id>
    <published>2021-11-10T03:23:50.000Z</published>
    <updated>2021-11-11T06:31:29.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="写在前面的话："><a href="#写在前面的话：" class="headerlink" title="写在前面的话："></a>写在前面的话：</h3><p>要么苟，要么滚！</p><p>和我共事4，5年的同事在和我完成最后一个项目时在今年5月1号之前陆续辞职了，很多事情我不能左右，该争取的我都争取了，希望他们有个好的发展。</p><p>共事这么多年，我对他们的技术能力还是比较认可的，在此之前也招过好几个都不能如意，直到他们的加入。</p><p>他们两个人学习能力很强，战斗力十足，年纪轻又无家庭的牵绊，在职场的竞争力还是比较强的。</p><p>但是我不一样，在这件事情上我苟了，因为该经历的我基本上都经历了，选择换一个环境继续打工可能不是目前的我最优的选择。</p><p>我经常在研发群里看到有人抱怨，抱怨公司要执行大小周，996，OKR，等等。只要看到这种消息我的统一回复是 “要么苟，要么滚！”</p><p><code>苟</code> 是指苟且，<code>滚</code> 是指跳槽换个公司。 </p><p>实际上，不管换到什么样的公司，同样的问题也会在不同的公司发生。历史是惊人的相似，只是他们对象不同而已。</p><h3 id="伊始"><a href="#伊始" class="headerlink" title="伊始"></a>伊始</h3><p>这个电商项目我们整整开发了4个自然月，其中包括春假10天的假期，在项目启动之前我就做好的方案选型。</p><p>我们选用了当前流行的客户端框架 <code>flutter</code> ，也正是选择了这个框架，间接的导致成员的离开。</p><p>我的两个团队成员，分别是<code>iOS</code>，<code>Android</code>原生开发，他们也乐意学习这个框架解锁新技能。而我则负责整个项目的管理以及所有服务器端<code>API</code>开发工作，好在服务器端并非从头开发，而是基于现有的<code>web</code>网站开发客户端接口，<br>而客户端整体<code>UI</code>设计是跟随<code>H5</code>站开发的。所以减轻了我们很多研发压力。</p><p>所有的一切我们进展的都很顺利，在春节放假的前一天，我发布的一个内测版本，此时项目才进行一个多月。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># alpha v1.0 release notes </span><br><span class="line"></span><br><span class="line">本客户端采用flutter开发，支持原生iOS,Android平台，iOS特殊性暂无法提供测试包，先提供Android包以供体验测试。</span><br><span class="line">服务器端基于xxx官网平台（thinkphp  + smarty）mobile模块进行接口开发，主要进行客户端请求拦截服务器跳转逻辑功能重构，以及支付接口对接等，确保逻辑完整性。</span><br><span class="line"></span><br><span class="line">1. 当前版本已发布4大核心模块，80多个子功能模块。</span><br><span class="line">2. 微信授权登录，普通账号注册于登录，修改账号密码，管理收货地址</span><br><span class="line">3. 微信支付，余额支付，账户预充值</span><br><span class="line">4. 购物车管理，订单管理，返修，退货，退款</span><br><span class="line">5. 商品分类，搜索，详情，晒单，评价，收藏</span><br><span class="line">6. 分销状态，推荐二维码，推荐链接。</span><br><span class="line"></span><br><span class="line">**注：**</span><br><span class="line">当前客户端版本基于线上官网开发，官网逻辑结构如果出现跟新会影响客户端的正常使用。</span><br><span class="line">测试过程中欢迎提供建议与意见，以及发现的bug，我们会在年后统一处理。</span><br><span class="line">当前版本未实现功能：客服聊天，红包添加</span><br><span class="line"></span><br><span class="line">**项目组成员：**</span><br><span class="line">Fred范方青，`项目管理与对接，服务器端接口开发`</span><br><span class="line">刘xx，周xx，`客户端开发`</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>忘记说了，服务器端是<code>PHP</code>开发的，在此之前我并未开发过PHP项目，也是边学边做的。</p><p>我们项目组正式编制只有三个人而且全都是研发，还有一个美工协助我们做一些图片素材。</p><p>2021年1月我们是公司最忙碌的几个人了，即便如此我从来都不要求他们加班，只要我的计划做的精准并给自己留有足够的buff，效率是第一生产力，进度我是有把握的。</p><blockquote><p>加班做样子，这件事我从来不做，也不削去做。</p></blockquote><p>印象深刻的是，年终尾牙活动，一地鸡毛！那个时候我们已经有了不好的预感了，因为老板派了个新领导担任<code>CEO</code>，我们私下称之 <code>xx</code></p><h3 id="年后"><a href="#年后" class="headerlink" title="年后"></a>年后</h3><p>惯例，年后我分别找项目组成员聊天，他们已经表露出对年终奖的不满之意。</p><p>虽然他们是向我汇报的，但他们的实际薪资，以及奖金情况我是不知道也做不了主的，公司也不会咨询我的意见，完全由老板主观的评断。</p><p>私人老板都是这么个德行，我已习以为常，2020年公司的业绩确有下滑但不至于到如此程度，这些我们都心知肚明。</p><p>老板愿意高薪请个无所事事的<code>ceo</code>都不愿意激励跟随公司多年的员工。（实际上我是知道为什么会出现这个<code>ceo</code>的，写这篇文章的时候他也被赶走了，空降我们这里之前他是华为一名技术研发人员，985高校毕业。我对他的评价就是<code>能力欠缺，德不匹位</code>）</p><p>直言，我对我的年终奖也不满意。我是拿年薪的，同时也是合伙人。</p><p>四月底，我们项目完成了，已经开始步入上架发布的流程了，此时项目组成员也陆续提出辞职。</p><p>了解到他们已经收到新公司的<code>offer</code>，过去做<code>flutter</code>开发，薪资基本上是现在的双倍。</p><p>我想挽留，也争取了，但失败了。</p><p>五月份，我独自一人完成包括iOS在内的多个平台的产品上架。</p><blockquote><p>咱们做技术的，就得耐得住寂寞</p></blockquote><p>这句话，是我的大学老师和我说的。我对我的情绪控制的还好也算是处事不惊了。</p><p>那个月，我感觉到了危机感，也许就是别人说的中年危机。</p><p>35岁了，我不想再管理团队了，一般人我也看不上眼，能力高的我又留不住。</p><p>经历过电商项目后，我对研发又充满的热情，就此又开始了我的独立研发之路。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="blog_" scheme="https://blog.fanfq.com/categories/blog/"/>
    
    
    <category term="blog_" scheme="https://blog.fanfq.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>游戏行业已与我渐行渐远，曾经我以他谋生</title>
    <link href="https://blog.fanfq.com/blog_/%E6%B8%B8%E6%88%8F%E8%A1%8C%E4%B8%9A%E5%B7%B2%E4%B8%8E%E6%88%91%E6%B8%90%E8%A1%8C%E6%B8%90%E8%BF%9C%EF%BC%8C%E6%9B%BE%E7%BB%8F%E6%88%91%E4%BB%A5%E4%BB%96%E8%B0%8B%E7%94%9F.html"/>
    <id>https://blog.fanfq.com/blog_/%E6%B8%B8%E6%88%8F%E8%A1%8C%E4%B8%9A%E5%B7%B2%E4%B8%8E%E6%88%91%E6%B8%90%E8%A1%8C%E6%B8%90%E8%BF%9C%EF%BC%8C%E6%9B%BE%E7%BB%8F%E6%88%91%E4%BB%A5%E4%BB%96%E8%B0%8B%E7%94%9F.html</id>
    <published>2021-08-12T06:59:44.000Z</published>
    <updated>2021-09-24T15:59:50.571Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>数年游戏行业从业经历，一路过来的心路历程，我不玩手游，不玩网游，今天告诉你我在玩什么？我在怎么玩？</p><p>当时每年都会参加不同的展会，如ChinaJoy，GMGC 等但凡有点规模的我都参加过，也代表公司设立过展台。</p><img src="https://cdn.fanfq.com/picgo/20210812150054.jpg?imageslim," class="" title="GMGC"><img src="https://cdn.fanfq.com/picgo/20210812150129.jpg?imageslim," class="" title="ChinaJoy"><p>我找了好久才找到这两张照片，回顾一下这几年我发过的朋友圈，绝大多数都没有我真人出境的照片，基本都是只拍了个展台，或者拍了下工作证。真的蛮可惜的，好在还找到了两张分别代表GMGC 和 ChinaJoy 的。</p><p>写到这里，我似乎觉得我要和游戏行业说再见了。这几年在游戏行业经历了太多的人和事，也见证了游戏行业爆发到萎靡的时代。说实话这几年的从业经历彻底打翻了我对游戏行业的认知，甚至对人性有了更加深刻的领悟。</p><p>以技术专家加入游戏行业，再后来的运营，商务多重角色的转换让我看清了互联网行业本来的面目，也让我看清了整个游戏的行业的生存之道。我感谢这几年的历练，也感谢我自己对陌生领域始终充满了好奇心。即便到现在我仍旧保持一颗敬畏之心去探索未知的领域。</p><p>我们这代人因为游戏经历的太多，你能想到什么历史性的事件是与游戏有关的？</p><p>在此感谢我的父亲，在我7岁的时候送我的礼物居然是一台胜天的游戏机。那个时候连彩色电视机都还没有普及的年代，我居然有了游戏机，毫不夸张的说那时候我才是这条街最亮的仔。</p><img src="https://cdn.fanfq.com/picgo/20210812150155.jpeg?imageslim," class="" title="胜天游戏机"><p>我也感谢我的两位朋友，他们分别送了XBOX,PS4. 这两台主机给我。比较可惜的是我真的没有太多的时间去体验这些游戏机。自从成年之后我未曾在游戏方面花太多的时间，也可以说市面的是绝大多数的游戏都没能成功的吸引我，好的游戏我会称赞他，即便如此想让我长时间的玩这款游戏比较难。</p><img src="https://cdn.fanfq.com/picgo/20210812150213.jpeg?imageslim," class="" title="XBOX 360"><img src="https://cdn.fanfq.com/picgo/20210812150223.jpeg?imageslim," class="" title="Play Station 4"><p>我总结了一下，我玩游戏不上瘾，这不是我有较强的自控力，而是我了解游戏的逻辑，我仅仅将游戏当做消费品，消遣时间用的。就和你刷短视频一样，都在消费内容，消遣时间而已。</p><p>人到中年，羁绊也越来越多，工作的烦恼，家庭的琐碎，但凡一个成年人如果有固定时间投身自己的爱好，在我看来是极为奢侈的一件事。</p><p>等新款的Switch发售，我准备入手一台，之所以迟迟不入手的主要原因是那块720p的屏幕。新款的Switch虽然升级成OLED屏幕了，可仍旧是720p的。比较可惜，但我不想再等了。我想奢侈一把，挤出固定时间好好玩玩游戏，玩玩Switch。</p><img src="https://cdn.fanfq.com/picgo/20210812150251.jpeg?imageslim,Switch" class="" title="OLED"><p>游戏行业背负了本该不该背负的舆论压力，游戏行业的从业者们，且行且珍惜。</p><p>8月3日，新华社旗下经济参考报发表文章，称以《王者荣耀》为代表的网络游戏是“精神鸦片”，会对未成年人的健康成长造成不可估量的影响。不过现在这篇文章也找不到了，你懂的。</p><p>作为曾今的游戏行业从业者来说，目前就全球而言，腾讯是最大的游戏公司，最大游戏发行公司，我甚至连他的财报都不用看，其中游戏的收入占其总收入的50%以上，剩下的就是广告收入。除了广告和游戏收入以外的其他收入基本可以忽略不计。</p><p>我刚入游戏行业的时候，当时最流行的手游是皇室战争，时间不长皇室战争的研发公司supercell就被腾讯收购了。但凡能叫得出来的名字的游戏公司，或多或少的都有腾讯的占股。</p><p>大家是否还记得马云曾今扬言称之“饿死也不做游戏”，但在2017年成立了阿里游戏，游戏行业这块蛋糕太诱惑了。</p><p>做为过来人我只能说游戏行业真的很挣钱，但实际上游戏行业近几年来并不好过。当初我们的合作伙伴还在继续做这行的不多了，都纷纷改行了。游戏版号，类似于图书背面那个条形码的ISBN号。游戏产品想要正式发行现在必须要有版号，以前野蛮生长的时候监管的并不是那么的严格，自从2018年以来能够办到游戏的版号已经不多了，基本都被大厂熔断，就已经卡死了90%的游戏公司。</p><p>这里补充一下，如果游戏是收费的，或者有内购的话现在必须要有版号的。如果是免费的或者是通过广告变现的是不需要版号的。这里是有区别的。</p><p>剩下的就是游戏内容，市面上绝大多数游戏的是换皮游戏。同一款游戏的换一套美术素材，换个名字就是新游戏，类似的情况比比皆是。从苹果App Store历年来整顿可以看出被下架的都是一些换皮的或者违规的游戏类产品。</p><p>作为我而言，是赞成游戏产品监管的。我承认类似 《Addiction by Design》这样的说法，游戏的成瘾性，支付点都是经过精心策划的。我觉得这个也无可厚非，分析用户的心里诱导他们的决策，在从商业行为中无所不在。</p><p>负责任的说市面上任何一款头部的APP，他们的每个按钮，每个颜色，每个字体都是经过精心的设计的。目的就是让用户更多的停留在他们的APP中，更何况市面上不乏那些通过AI分析进行内容精准推荐的APP。</p><p>至于《王者荣耀》是否真的是“精神鸦片”不是简单的一篇文章就能定性的，也不是我所关注的内容。我希望能够提出有效的解决方案，而不是一棍子打死。我们成年人也不希望和自己打游戏的队友是小学生，通过游戏的分级制度，实名认证，支付通道，在线时长等等多维度的疏导，建立一个有序的健康的游戏环境才是出发点。</p><p>一棍子打死了，没有游戏，还有打牌，斗蛐蛐，斗鸡。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="blog_" scheme="https://blog.fanfq.com/categories/blog/"/>
    
    
    <category term="blog_" scheme="https://blog.fanfq.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>播客录制技巧软件篇audacity基础配置</title>
    <link href="https://blog.fanfq.com/podcast/%E6%92%AD%E5%AE%A2%E5%BD%95%E5%88%B6%E6%8A%80%E5%B7%A7%E8%BD%AF%E4%BB%B6%E7%AF%87audacity%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE.html"/>
    <id>https://blog.fanfq.com/podcast/%E6%92%AD%E5%AE%A2%E5%BD%95%E5%88%B6%E6%8A%80%E5%B7%A7%E8%BD%AF%E4%BB%B6%E7%AF%87audacity%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE.html</id>
    <published>2021-07-29T06:57:32.000Z</published>
    <updated>2021-09-24T15:59:50.571Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>以我的经验，尽量在录制前就做好准备，尽可能的确保录制出来的音频质量的可靠的，避免过多的后期处理。<br>个人感受电容麦克风更加适合录制唱歌，或者对声音真的有特别的细腻的要求的。<br>否则选择动圈麦克风是比较明智的选择，家庭环境避免不了环境底噪的如电脑的风扇，<br>空调的声音等，而动圈麦克风比较有效的屏蔽这种底噪。<br>如果想要监听人声以及后期做编辑，推荐使用监听耳机，而一般的hifi耳机并不能真实的还原声音原本的面貌。<br>这里说明一下，如果条件允许尽可能买好一点的音频设备，音频设备相比相机来说是比较保值的而且不容易坏。<br>买好点的设备目的就是为了少走冤枉路 <a href="https://www.elselook.com/about/devices">我的设备清单</a></p></blockquote><p><a href="https://www.audacityteam.org/">audacity</a> 是一款免费的开源软件，对比下来这款软件特别适合新手。以下是我经常用到的几个配置。</p><h1 id="降噪"><a href="#降噪" class="headerlink" title="降噪"></a>降噪</h1><p>录制的技巧，首先录制一段环境音然后再开始真正的录制，这段环境音可以作为我们后期降噪时所需采样的素材。<br>通过采样素材对比算法后，软件会自动将段落中类似的波段的音频给消除掉，这也就是降噪所产生的作用。</p><img src="https://cdn.fanfq.com/picgo/20210729154425.png?imageslim" class=""><h1 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h1><p>这个比较重要，特别录制音频质量不好的情况下，比如说话离话筒忽远忽近个波形形成一个个山峰的时候，这个步骤是一定会使用到的。<br>他的作用主要是将高于指定阈值的音量进行压缩<br>通常情况下阈值会设定为-15db（也可以根据波形的实际情况进行调整），比率为2:1<br>那么0db的音量会被压缩成 -15+（15-0）* 1/2 = -7.5 db , 这里要注意一下只有音量大于-15db的时候才会被压缩。</p><img src="https://cdn.fanfq.com/picgo/20210729154454.png?imageslim" class=""><h1 id="图形化均衡器"><a href="#图形化均衡器" class="headerlink" title="图形化均衡器"></a>图形化均衡器</h1><p>这个比较个性化的调整，主要用于调整声音的频率的。通常我不调。</p><img src="https://cdn.fanfq.com/picgo/20210729154528.png?imageslim" class=""><h1 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a>标准化</h1><p>这个是很重要的一件事，一定要做的。<br>因为经过以上的操作，声音的音量必然会受到影响，我知道的是很多平台会二次压缩的统一响度的，但绝大多数平台是直出的。出现的症状就是别人听你的节目会觉得声音小或者大，听感很不舒服。</p><img src="https://cdn.fanfq.com/picgo/20210729154620.png?imageslim" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="podcast" scheme="https://blog.fanfq.com/categories/podcast/"/>
    
    
    <category term="podcast" scheme="https://blog.fanfq.com/tags/podcast/"/>
    
  </entry>
  
  <entry>
    <title>VirtualBox安装Ubuntu Linux常用配置</title>
    <link href="https://blog.fanfq.com/dev/VirtualBox%E5%AE%89%E8%A3%85Ubuntu_Linux%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE.html"/>
    <id>https://blog.fanfq.com/dev/VirtualBox%E5%AE%89%E8%A3%85Ubuntu_Linux%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE.html</id>
    <published>2021-03-01T07:37:27.000Z</published>
    <updated>2021-09-24T15:59:50.570Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><p>个人习惯使用<code>桥接模式</code>也推荐这个模式，DHCP会独立分发一个IP给虚拟机LAN中可当做独立主机使用，缺点就是会占用一个IP不过这点在本地开发中可以忽略毕竟内网通常是不会缺IP资源的。</p><p><strong>注意</strong> 这里需要注意下，我这里 <code>en0:以太网</code> 是指通过网线来模拟虚拟机的网卡端口，也就是说宿主机需要连接网线。如果是无线网卡的话则是 <code>en1:Wi-Fi(AirPort)</code> 这里需要注意一下，特别是针对基于RJ45接口的笔记本而言。</p><img src="https://cdn.fanfq.com/picgo/20210301154148.png?imageslim" class=""><h3 id="共享目录"><a href="#共享目录" class="headerlink" title="共享目录"></a>共享目录</h3><p>顾名思义就是在宿主机上创建一个目录，方便于虚拟机随时的访问，以便于宿主机与虚拟机文件之间的拷贝。</p><ol><li><p>在宿主机创建共享的位置，比如我这里是 <code>/User/fanfq/VirtualBox VMs/macshare</code></p></li><li><p>配置共享目录 </p></li></ol><img src="https://cdn.fanfq.com/picgo/20210301155815.png?imageslim" class=""><ol start="3"><li>配置虚拟机，需要注意的一下这里需要安装vbox的增强插件，直接在虚拟机中点击菜单栏的<code>devices</code> &gt; <code>Insert Guest Additions CD image</code> 点击安装即可</li></ol><img src="https://cdn.fanfq.com/picgo/20210301153505.png?imageslim" class=""><ol start="4"><li><p>重启测试，此时在进入系统就会看在根目录看到 <code>/macshare</code> 目录，此时在此目录下写入文件，在宿主机 <code>/User/fanfq/VirtualBox VMs/macshare</code> 会实时同步，反之亦可。</p></li><li><p>手动挂载共享目录，如果第4步不成功可能需要手动挂载</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t vboxsf macshare /macshare</span><br></pre></td></tr></table></figure><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><p>默认情况下ubuntu是没有安装 <code>ssh</code> 服务器端的，为了方便客户端的连接需要自己手动安装一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="dev" scheme="https://blog.fanfq.com/categories/dev/"/>
    
    
    <category term="dev" scheme="https://blog.fanfq.com/tags/dev/"/>
    
    <category term="运维" scheme="https://blog.fanfq.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Maven工程引用jar包</title>
    <link href="https://blog.fanfq.com/dev/Maven%E5%B7%A5%E7%A8%8B%E5%BC%95%E7%94%A8jar%E5%8C%85.html"/>
    <id>https://blog.fanfq.com/dev/Maven%E5%B7%A5%E7%A8%8B%E5%BC%95%E7%94%A8jar%E5%8C%85.html</id>
    <published>2021-02-07T03:54:54.000Z</published>
    <updated>2021-09-24T15:59:50.570Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>近期项目需要研究了下京东SDK，发现其提供了SDK jar包。自从用了mvn进行包管理，应该是这几年都很少去引用jar了。</p><p>为此整理一下如何在maven工程引用jar包。</p><h3 id="将jar包加入本地仓库"><a href="#将jar包加入本地仓库" class="headerlink" title="将jar包加入本地仓库"></a>将jar包加入本地仓库</h3><p>按照个人习惯先备个shell脚本，方便使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file \</span><br><span class="line">-Dfile=open-api-sdk-2.0-2021-02-06.jar \</span><br><span class="line">-DgroupId=com.jd.open.api \</span><br><span class="line">-DartifactId=jd-open-api \</span><br><span class="line">-Dversion=2.0 \</span><br><span class="line">-Dpackaging=jar</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中：<code>-DgroupId</code>，<code>-DartifactId</code> 的作用是指定了这个jar包在repository的安装路径，只是用来告诉项目去这个路径下寻找这个名称的jar包。</p><p>如果本地仓库被清楚或者部署到新的机器上都需要安装一下。</p><p>安装结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] ------------------&lt; org.apache.maven:standalone-pom &gt;-------------------</span><br><span class="line">[INFO] Building Maven Stub Project (No POM) 1</span><br><span class="line">[INFO] --------------------------------[ pom ]---------------------------------</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --- maven-install-plugin:2.4:install-file (default-cli) @ standalone-pom ---</span><br><span class="line">[INFO] Installing /.../app/src/main/resources/libs/open-api-sdk-2.0-2021-02-06.jar to /Users/fred/.m2/repository/com/jd/open/api/jd-open-api/2.0/jd-open-api-2.0.jar</span><br><span class="line">[INFO] Installing /var/folders/m5/n09g6tjx30510drtjpc405m40000gn/T/mvninstall7006216312529085370.pom to /Users/fred/.m2/repository/com/jd/open/api/jd-open-api/2.0/jd-open-api-2.0.pom</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  0.410 s</span><br><span class="line">[INFO] Finished at: 2021-02-07T10:55:00+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="跟新pom-xml文件"><a href="#跟新pom-xml文件" class="headerlink" title="跟新pom.xml文件"></a>跟新pom.xml文件</h3><p>然后再在项目工程中引用即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.jd.open.api&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;jd-open-api&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>注</strong>为了方便起见，我都会将需要三方jar包都会放在工程目录中以免丢失或者忘记。</p><img src="https://cdn.fanfq.com/picgo/20210207141200.png?imageslim" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="dev" scheme="https://blog.fanfq.com/categories/dev/"/>
    
    
    <category term="mvn" scheme="https://blog.fanfq.com/tags/mvn/"/>
    
  </entry>
  
  <entry>
    <title>js获取浏览器语言</title>
    <link href="https://blog.fanfq.com/dev/js%E8%8E%B7%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%AD%E8%A8%80.html"/>
    <id>https://blog.fanfq.com/dev/js%E8%8E%B7%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%AD%E8%A8%80.html</id>
    <published>2021-02-04T02:25:38.000Z</published>
    <updated>2021-09-24T15:59:50.569Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var type = navigator.appName;</span><br><span class="line">if (type == &quot;Netscape&quot;)&#123;</span><br><span class="line">  var lang = navigator.language;//获取浏览器配置语言，支持非IE浏览器</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  var lang = navigator.userLanguage;//获取浏览器配置语言，支持IE5+ == navigator.systemLanguage</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lang = lang.toLowerCase();</span><br><span class="line">console.log(lang);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var lang_short = lang.substr(0, 2);//获取浏览器配置语言前两位</span><br><span class="line"></span><br><span class="line">if (lang == &quot;zh-cn&quot;)&#123;</span><br><span class="line">  console.log(&quot;简体中文&quot;);</span><br><span class="line">  //alert(lang);</span><br><span class="line">  //window.location.replace(&#x27;url&#x27;);//中文编码时打开链接</span><br><span class="line">&#125;else if (lang_short == &quot;zh&quot;)&#123;</span><br><span class="line">  console.log(&quot;繁体中文&quot;);</span><br><span class="line">  //window.location.replace(&#x27;url&#x27;);</span><br><span class="line">&#125;else&#123;//其他语言编码时打开以下链接</span><br><span class="line">  //window.location.replace(&#x27;url&#x27;);</span><br><span class="line">  console.log(&quot;英语&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>文中截取lang的前2位字符，是因为浏览器语言返回值可能是：</p><table><thead><tr><th align="right">lang</th><th align="right">name</th></tr></thead><tbody><tr><td align="right">zh-cn</td><td align="right">Chinese(PRC)</td></tr><tr><td align="right">zh-tw</td><td align="right">Chinese(Taiwan Region)</td></tr><tr><td align="right">zh-hk</td><td align="right">Chinese(Hong Kong SAR, PRC)</td></tr><tr><td align="right">zh-sg</td><td align="right">Chinese(Singapore)</td></tr><tr><td align="right">en-us</td><td align="right">English(United States)</td></tr><tr><td align="right">en</td><td align="right">English</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="dev" scheme="https://blog.fanfq.com/categories/dev/"/>
    
    
    <category term="dev" scheme="https://blog.fanfq.com/tags/dev/"/>
    
    <category term="js" scheme="https://blog.fanfq.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>宝塔面板常用配置纪要</title>
    <link href="https://blog.fanfq.com/dev/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E7%BA%AA%E8%A6%81.html"/>
    <id>https://blog.fanfq.com/dev/%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E7%BA%AA%E8%A6%81.html</id>
    <published>2020-12-25T08:54:37.000Z</published>
    <updated>2021-09-24T15:59:50.569Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>我个人是使用习惯是使用阿里云自带的 <code>负载均衡SLB</code> 服务，完成 <code>反向代理</code>，<code>负责均衡</code>，<code>SSL证书</code>,<code>域名解析</code> 等操作，同时也推荐在Pord环境中使用，这样在后期在跟新的过程中更加灵活。<br>而在开发测试环境中，单机部署宝塔面板，可通过<code>Ngix</code>的配置完成以上配置。</p><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p><code>eg.以java项目为例，我们部署的到服务器上确保指定端口可访问，如 SERVER_IP:8080</code><br>但实际情况是，我们希望 <code>api.xxx.com</code> 这种域名的情况的下去访问该网站或者接口时，具体操作步骤如下。</p><ol><li><p>域名解析，将 <code>api.xxx.com</code> cname 指向到 SERVER_IP 上，注意这里在没有配置端口号的情况下默认端口为80，通过<code>ping  api.xxx.com </code>验证是否解析成功。</p></li><li><p>在宝塔面包中创建一个静态网站,如下图所示。</p></li></ol><img src="https://cdn.fanfq.com/picgo/20201228093523.png?imageslim" class=""><p>因为我们是java工程，只需要宝塔给我们做一个反向代理的功能，所以并不关注其他的有关php的配置,选择静态部署。</p><ol start="3"><li>反向代理</li></ol><p>配置反向代理将服务请求转发至 <code>SERVER_IP:8080</code></p><img src="https://cdn.fanfq.com/picgo/20201228094451.png?imageslim" class=""><p>好，截止到目前为止，即可通过 <code>api.xxx.com</code> 访问到 <code>SERVER_IP:8080</code> 网站，反向代理的主要功能就是如此，说白了就是做了个端口映射。在此解决一台服务器通过不同的域名解决同一端口的地址映射关系。</p><h4 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h4><p>如果是API服务，并且工程中并没有处理跨域的问题时，又不想通过代码的方式去解决，此时可以通过配置ngix解决此问题。</p><img src="https://cdn.fanfq.com/picgo/20201228095218.png?imageslim" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#解决跨域问题</span><br><span class="line">add_header Access-Control-Allow-Origin *;</span><br><span class="line">add_header Access-Control-Allow-Headers X-Requested-With;</span><br><span class="line">add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</span><br></pre></td></tr></table></figure><h3 id="应用管理器"><a href="#应用管理器" class="headerlink" title="应用管理器"></a>应用管理器</h3><p>这个是宝塔官方出的一个管理工具，具体功能类似的pm2提供守护进程确保服务的稳定性，这也是我最近才开始用的。我使用其的目的主要是为了解决应用程序跟随服务器自启动。</p><ol><li>应用管理器中首先在<code>环境池</code>中创建想要的启动命令，比如下面的java命令</li></ol><img src="https://cdn.fanfq.com/picgo/20201228095757.png?imageslim" class=""><ol start="2"><li>然后再在<code>应用列表</code>中<code>添加应用</code></li></ol><img src="https://cdn.fanfq.com/picgo/20201228100154.png?imageslim" class=""><p>最终其完整的启动命令如下：<br><code>/usr/bin/java -jar /home/fanfq/apps/x.jar --server.port=8180 --downloadPath=/macshare</code></p><p><em><strong>注意</strong></em> 中文乱码问题</p><img src="https://cdn.fanfq.com/picgo/20201231113202.png?imageslim" class=""><p><code>/usr/bin/java -Dfile.encoding=UTF-8 -jar /home/fanfq/apps/x.jar --server.port=8180 --downloadPath=/macshare</code></p><p>如果启用了<code>进程守护</code>那么此时可以通过各种方式停止服务，然后再观察该服务是否正常重启。这就是<code>进程守护</code>的意义，btw我们经常所见的mysqld实际上就是mysql服务的守护进程，通常用后缀d命名。</p><h3 id="webhook"><a href="#webhook" class="headerlink" title="webhook"></a>webhook</h3><p>这个功能也是常规用的比较多的应用，我的应用场景是当git仓库有新的push时会发送一个http请求给服务器，此时服务器会自动pull到最新版本，并自动完成编译，重启等操作。<br>此功能是比较简易话的完成自动构建的操作，在开发测试环境中特别适用。</p><ol><li>创建webhook，编辑执行脚本<img src="https://cdn.fanfq.com/picgo/20201228101333.png?imageslim" class=""></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">sh /root/xxx/bin/autobuild.sh</span><br><span class="line"></span><br><span class="line">time=$(date &quot;+%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">echo &quot;----latest build time $&#123;time&#125;&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>通过查看秘钥获取请求的地址<img src="https://cdn.fanfq.com/picgo/20201228101431.png?imageslim" class=""></li></ol><p>后续只要接口地址获取到请求，即触发脚本执行。</p><p><em><strong>注意</strong></em> </p><ol><li>请求接口要求外网可访问，所以说这台服务器要有公网ip，确保可访问。</li><li>脚本执行的权限问题，通过日志的方式查看脚本的执行是否成功。如果出现日志不如预期则可能是执行过程中出现权限等问题。需要自己测试排查如权限，环境变量等。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="dev" scheme="https://blog.fanfq.com/categories/dev/"/>
    
    
    <category term="dev" scheme="https://blog.fanfq.com/tags/dev/"/>
    
    <category term="运维" scheme="https://blog.fanfq.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Telegram Bot 开发初体验,抖音去水印下载机器人实践</title>
    <link href="https://blog.fanfq.com/dev/Telegram_bot_dev_thinking.html"/>
    <id>https://blog.fanfq.com/dev/Telegram_bot_dev_thinking.html</id>
    <published>2020-12-24T05:56:34.000Z</published>
    <updated>2021-09-24T15:59:50.569Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="https://cdn.fanfq.com/picgo/20201225083005.jpg?imageslim" class=""><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>原本是打算用<code>钉钉</code>实现该功能的，一看要做企业认证就放弃的。不得不说这种所谓的认证就拒绝了相当多的独立开发者，这一点绝对是受诟病的。</p><p>前端时间研究下<code>Telegram</code>相关的开发，总体来说实现了想要得所有功能，但是在测试的过程中发现很多问题。主要是因为早期Tg的开放接口被滥用的问题导致的，从而想要实现一些功能是受限的以免接口滥用。</p><p>Telegram Bot 和绝大多数的IM通讯软件中的机器人是一样的，</p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="注册一个机器人，获取token"><a href="#注册一个机器人，获取token" class="headerlink" title="注册一个机器人，获取token"></a>注册一个机器人，获取token</h4><p>直接在Tg中与@BotFather对话即可创建bot,比较有趣的是在Tg很多的交互式体验都是通过类似对话的方式。</p><img src="https://cdn.fanfq.com/picgo/20201225082418.jpg?imageslim" class=""><h4 id="测试token"><a href="#测试token" class="headerlink" title="测试token"></a>测试token</h4><p>将下面的链接的<code>&#123;TOKEN&#125;</code>替换成所获取的token然后浏览器访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.telegram.org/bot&#123;TOKEN&#125;/getUpdates</span><br></pre></td></tr></table></figure><p>返回数据，此时与机器人对话的内容均会在此显示出来</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">ok: <span class="literal">true</span>,</span><br><span class="line">result: [ ... ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三方sdk集成"><a href="#三方sdk集成" class="headerlink" title="三方sdk集成"></a>三方sdk集成</h4><p>为了方便开发，已经有很成熟的三方sdk了。这里推荐 <a href="https://github.com/rubenlagus/TelegramBots/wiki/Getting-Started">TelegramBots</a></p><h3 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h3><p>趁此机会和大家介绍一下我做的机器人，其主要功能就是通过抖音的分享链接下载其不带水印版本的视频。</p><p>机器人体验地址 <a href="https://t.me/fast_dl_bot">https://t.me/fast_dl_bot</a></p><img src="https://cdn.fanfq.com/picgo/20201225083459.png?imageslim" class=""><h4 id="抖音去水印原理"><a href="#抖音去水印原理" class="headerlink" title="抖音去水印原理"></a>抖音去水印原理</h4><h5 id="选择想要下载的视频，获取分享链接如下"><a href="#选择想要下载的视频，获取分享链接如下" class="headerlink" title="选择想要下载的视频，获取分享链接如下"></a>选择想要下载的视频，获取分享链接如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">今天是国际篮球日，你能#接住姚明的传球  吗？  https://v.douyin.com/JbUn9qr/ 复制此链接，打开抖音搜索，直接观看视频！</span><br></pre></td></tr></table></figure><h5 id="访问链接，解析出视频源地址，如下"><a href="#访问链接，解析出视频源地址，如下" class="headerlink" title="访问链接，解析出视频源地址，如下"></a>访问链接，解析出视频源地址，如下</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">https://v.douyin.com/JbUn9qr/ </span><br><span class="line"></span><br><span class="line">跳转 -&gt; </span><br><span class="line"></span><br><span class="line">https://www.iesdouyin.com/share/video/6908508376079109390/?region=CN&amp;mid=6908508442169133832&amp;u_code=11ijh199a&amp;titleType=title&amp;did=68226817704&amp;iid=668150976480124&amp;utm_source=copy_link&amp;utm_campaign=client_share&amp;utm_medium=android&amp;app=aweme</span><br><span class="line"></span><br><span class="line">获取视频源地址 -&gt;</span><br><span class="line"></span><br><span class="line">https://aweme.snssdk.com/aweme/v1/playwm/?video_id=v0300f010000bvfv7l99jbbabl28o260&amp;ratio=720p&amp;line=0</span><br></pre></td></tr></table></figure><img src="https://cdn.fanfq.com/picgo/20201225083829.png?imageslim" class=""><h5 id="修改视频源地址，去掉视频源地址中的wm即可得到不带水印的地址源。"><a href="#修改视频源地址，去掉视频源地址中的wm即可得到不带水印的地址源。" class="headerlink" title="修改视频源地址，去掉视频源地址中的wm即可得到不带水印的地址源。"></a>修改视频源地址，去掉视频源地址中的<code>wm</code>即可得到不带水印的地址源。</h5><p>并通 agent 为手机客户端访问改地址，即可获取到不带水印的视频。<br>然后下载视频即可得到不带水印的视频</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://aweme.snssdk.com/aweme/v1/play/?video_id=v0300f010000bvfv7l99jbbabl28o260&amp;ratio=720p&amp;line=0</span><br></pre></td></tr></table></figure><img src="https://cdn.fanfq.com/picgo/20201225083828.png?imageslim" class=""><h4 id="Telegram-Bot-实现"><a href="#Telegram-Bot-实现" class="headerlink" title="Telegram Bot 实现"></a>Telegram Bot 实现</h4><p>采用 <code>TelegramBots</code> 实现，涉及三方软件可能会有争议，既不提供代码实现，本文仅分析原理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAmazingBot</span> <span class="keyword">extends</span> <span class="title">TelegramLongPollingBot</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpdateReceived</span><span class="params">(Update update)</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//1.基础数据获取与处理</span></span><br><span class="line">       String username = update.getMessage().getChat().getUserName();</span><br><span class="line">       String text = update.getMessage().getText(); </span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.通过正则判断text是否包含url等等其它验证</span></span><br><span class="line">       <span class="comment">//3.通过url获取不带水印的下载链接</span></span><br><span class="line">       <span class="comment">//4.通过下载链接获取输入流</span></span><br><span class="line">       <span class="comment">//以上2，3，4涉及三方软件可能会有争议，既不提供代码实现，本文仅分析原理。</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.将输入流直接返回给发送者</span></span><br><span class="line">       InputFile inputFile = <span class="keyword">new</span> InputFile(inputStream,System.currentTimeMillis()+<span class="string">&quot;.mp4&quot;</span>);</span><br><span class="line">       SendVideo video = <span class="keyword">new</span> SendVideo();</span><br><span class="line">       video.setVideo(inputFile);</span><br><span class="line">       video.setChatId(update.getMessage().getChatId().toString());</span><br><span class="line">       execute(video);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBotUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;fast_dl_bot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBotToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1434***IaQ4w5iJTGCRDtMSUVY&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="dev" scheme="https://blog.fanfq.com/categories/dev/"/>
    
    
    <category term="dev" scheme="https://blog.fanfq.com/tags/dev/"/>
    
    <category term="Telegram" scheme="https://blog.fanfq.com/tags/Telegram/"/>
    
  </entry>
  
  <entry>
    <title>似乎应该调整一下工作流，让时间更有效率</title>
    <link href="https://blog.fanfq.com/blog_/%E4%BC%BC%E4%B9%8E%E5%BA%94%E8%AF%A5%E8%B0%83%E6%95%B4%E4%B8%80%E4%B8%8B%E5%B7%A5%E4%BD%9C%E6%B5%81%E8%AE%A9%E6%97%B6%E9%97%B4%E6%9B%B4%E6%9C%89%E6%95%88%E7%8E%87.html"/>
    <id>https://blog.fanfq.com/blog_/%E4%BC%BC%E4%B9%8E%E5%BA%94%E8%AF%A5%E8%B0%83%E6%95%B4%E4%B8%80%E4%B8%8B%E5%B7%A5%E4%BD%9C%E6%B5%81%E8%AE%A9%E6%97%B6%E9%97%B4%E6%9B%B4%E6%9C%89%E6%95%88%E7%8E%87.html</id>
    <published>2020-11-16T03:58:57.000Z</published>
    <updated>2021-09-24T15:59:50.568Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>原本我以为我可以在周末的时间写出稿件，但实践证明这个太难了，我计算了一下仅仅周六上午半天的时间我给小朋友擦屁股累积超过10次以上，更多是中途的捣乱，姐姐有点粘我总是习惯性的试图在我工作的过程中坐到我的腿上，和我一起看着电脑屏幕，我和妻子都一致的观念在我们的家庭教育中尽可能的让小朋友减少对显示器的依赖。所以此时我不得不放下手头上的工作去陪伴她们。</p><p>我们家是绝对杜绝小朋友玩手机，平板电脑的，即便是电视每周只可以限制性的看一个小时，而我现在逐步的下载一些优质的动画电影陪伴她们一起收看。妹妹更喜欢“天猫精灵”因为更方便通过语音交互的方式切换她想收听的内容，常常早晨起来她独自一人坐在客厅听着天猫精灵里播放出来的故事。而姐姐视乎缺乏耐心基本不会长时间做在那里收听节目，即便是看电视她也会因为其他的事情中断她的观看兴趣。</p><p>这两人的性格，差别太大了。</p><p>所以，我可能要尝试调整一下我的工作流，让时间更加的效率。周末的时间更多的是陪伴小朋友，见证他们成长更多的是陪伴。实际上养娃的过程中琐碎的事情特别多，每当看到她们睡着的样子就特别的温馨。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="blog_" scheme="https://blog.fanfq.com/categories/blog/"/>
    
    
    <category term="blog_" scheme="https://blog.fanfq.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>花了两天的时间终于把Podcast发布站搭建好了</title>
    <link href="https://blog.fanfq.com/podcast/%E8%8A%B1%E4%BA%86%E4%B8%A4%E5%A4%A9%E7%9A%84%E6%97%B6%E9%97%B4%E7%BB%88%E4%BA%8E%E6%8A%8APodcast%E5%8F%91%E5%B8%83%E7%AB%99%E6%90%AD%E5%BB%BA%E5%A5%BD%E4%BA%86.html"/>
    <id>https://blog.fanfq.com/podcast/%E8%8A%B1%E4%BA%86%E4%B8%A4%E5%A4%A9%E7%9A%84%E6%97%B6%E9%97%B4%E7%BB%88%E4%BA%8E%E6%8A%8APodcast%E5%8F%91%E5%B8%83%E7%AB%99%E6%90%AD%E5%BB%BA%E5%A5%BD%E4%BA%86.html</id>
    <published>2020-11-04T08:25:28.000Z</published>
    <updated>2021-09-24T15:59:50.568Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这篇文章主要是要将的我工作流给记录下来，以免以后时间长了忘记了。</p><p><a href="http://fm.fanfq.com/">http://fm.fanfq.com</a> 这个站实际上是我的podcast发布站，采用<code>hexo</code>+<code>next主题</code>+<code>podcasts插件</code>,放在<code>github</code>上托管，mp3等资源文件放在<a href="!https://portal.qiniu.com/signup?code=1h449nnsixj6a">七牛CDN</a>上托管。</p><p>实际上没有什么，主要是说下这个podcasts插件并不好用，我自己根据实际需求做了修改，以及增加了一个脚本获取mp3文件的数据。</p><p>podcasts插件主要是为了生成符合apple podcast rss feed 文件，貌似国外的主流的都是以rss订阅的方式发布的，这很好，不需要作者每个平台手动的发布，我这里的发布站也是为了解决这个问题。</p><p>有关podcasts插件修改内容看这个链接：(这要比较重要，一定要验证成功才有用)<br><a href="https://github.com/fanfq/hexo-generator-podcasts">https://github.com/fanfq/hexo-generator-podcasts</a></p><p>还写了python脚本为了获取mp3的参数：<br><a href="https://github.com/fanfq/python-learning/blob/master/src/util/file/mp3_file_rename.py">https://github.com/fanfq/python-learning/blob/master/src/util/file/mp3_file_rename.py</a></p><p><code>mp3_file_name.py</code>这个脚本，目的是为了重命名文件。如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">用于podcast音频文件整理</span><br><span class="line">源文件：003.mp3</span><br><span class="line">重命名后的文件：fm003_8776581_2192.mp3</span><br><span class="line">文件命名规范：fm|003|_length_duration</span><br><span class="line">prefix:文件前缀</span><br><span class="line">003：文件原名</span><br><span class="line">length：文件体积单位byte</span><br><span class="line">duration：文件播放时长单位s</span><br></pre></td></tr></table></figure><p>然后就是写文章了，目前这个文章的结构是需要手动维护的，文章结构示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &quot;#4.整装待发扬帆起航，拒绝消费主义&quot;  #文章标题</span><br><span class="line">category: podcast #固定值</span><br><span class="line">media: https://dl.fanfq.com/fm.fanfq.com/fm004_11922309_496.mp3 #固定值，建议放CDN </span><br><span class="line">image: https://dl.fanfq.com/fm.fanfq.com/fred_1024x1024_fm.jpg   #固定值，建议放CDN </span><br><span class="line">duration: 496  #mp3文件播放时长，这里单位是秒</span><br><span class="line">type: audio/mpeg #固定值</span><br><span class="line">length: 11922309  #mp3文件的字节数，右键文件查看所占磁盘空间</span><br><span class="line">layout: podcast  #固定值</span><br><span class="line">date: 2020-11-03 21:21:57 #创建时间</span><br><span class="line">tags: [播客,消费主义] #文章标签</span><br><span class="line">urlname: vol4 #比如我这里最终文章的链接是 https://fm.fanfq.com/vol4.html</span><br><span class="line">description: 轻奢，小资，精致，这些词是不是听起来有点耳熟?在我看来这些词都是消费主义的簇拥者自己创造出来的文化，通过这种方式给消费者洗脑最终促使消费者买单。 #这个描述，为了填充feed用而不是正文</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">文章正文...</span><br></pre></td></tr></table></figure><p>编辑好后直接发布到github上就可以了，然后等苹果的服务器自动同步。</p><h2 id="总结一下的，流程是"><a href="#总结一下的，流程是" class="headerlink" title="总结一下的，流程是"></a>总结一下的，流程是</h2><p>1.编辑好的mp3文件发到mp3目录下<br>2.执行mp3目录下的 <code>mp3_file_name.py</code> 脚本，自动重命名以及上传到CDN<br>4.创建新的文档 <code>hexo new post NAME</code><br>5.编辑 <code>NAME.md</code> 文件信息<br>6.<code>hexo s</code> 本地预览一下，看是否都正常，只要mp3能正常播放那问题不大<br>7.<code>hexo clean</code>, <code>hexo g</code>,<code>hexo deploy</code> 全套。</p><span itemprop="image" itemscope itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://cdn.fanfq.com/picgo/20201119151421.png?imageslim" class="full-image" alt="工作流" /><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="podcast" scheme="https://blog.fanfq.com/categories/podcast/"/>
    
    
    <category term="架构" scheme="https://blog.fanfq.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="工作流" scheme="https://blog.fanfq.com/tags/%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    
    <category term="podcast" scheme="https://blog.fanfq.com/tags/podcast/"/>
    
  </entry>
  
  <entry>
    <title>网络游戏通讯(WebSocket/Socket)数据加密最佳实践</title>
    <link href="https://blog.fanfq.com/%E6%9E%B6%E6%9E%84/websocket_network_encryption_security_protocol_the_best_practices.html"/>
    <id>https://blog.fanfq.com/%E6%9E%B6%E6%9E%84/websocket_network_encryption_security_protocol_the_best_practices.html</id>
    <published>2020-08-04T10:12:50.000Z</published>
    <updated>2021-09-24T15:59:50.568Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话:"></a>写在前面的话:</h3><p>之前一篇文章<a href="https://blog.fanfq.com/%E6%9E%B6%E6%9E%84/netty_protobuf_best_practices">《Creator WebSocket Protobuf整合之保姆级全攻略》</a>大概的介绍了下有关protobuf的整合，首先我们认清一点protobuf仅仅是数据封装的模式，并没有加密功能，简单的来说将其理解成增强型json，以便于理解。</p><p>近期也看了一些服务器端的源码，总的来说protobuf算是比较主流的，老点的项目有用json的或者是body是json然后用LengthField加头的。不管如何我个人还是建议使用protobuf，其优势不再赘述了。</p><p>在阅读源码期间，偶然发现baidu的开源项目 [jprotobuf] (<a href="https://github.com/jhunters/jprotobuf">https://github.com/jhunters/jprotobuf</a>) ，其主要的优势就是不需要再编写.proto的文件的直接在pojo类上加上注解即可，一定程度的简化了我们开发的流程提高的开发效率。但我个人观点还是需要.proto文件的，即便没有此文件也需要通过文档的形式列出所有通讯消息的结构体。随时时间的推移项目的迭代以及各种跨平台的客户端的开发，有一份清晰的文档往往事半功倍，这也算是我个人的偏执吧。</p><span id="more"></span><span itemprop="image" itemscope itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/uploads/msg.png" class="full-image" alt="结合本文自定义消息" title="结合本文自定义消息" /><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><h3 id="本文重点："><a href="#本文重点：" class="headerlink" title="本文重点："></a>本文重点：</h3><p>websocket/socket网路通讯主流的加密方式，适用于各种应用包括游戏。<br>数据的加密解密必然会带来额外的开销，至于是否采用加密取决于数据的敏感性，如果涉及用户隐私，如个人信息，交易记录等信息还是有必要的。</p><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><img src="/uploads/times.png" class=""><h3 id="流程解释"><a href="#流程解释" class="headerlink" title="流程解释"></a>流程解释</h3><p>1.客户端创建连接（建立websocket/socket通讯），申请AES密钥。</p><p>1).当连接创建成功后客户端所发出去的第一个包是通过RSA公钥加密的，其目的就是为了和服务器端申请后续通讯所使用的AES密钥。</p><p>2.而服务器当收到客户端的请求AES密钥的请求包时</p><p>1).通过RSA私钥解密请求包，并验证消息</p><p>2).为本次连接临时生成一个AES密钥(缓存在服务器端)并返回给客户端。也就是说AES密钥每次都会变的，而不是一个固定的值。</p><p>3.客户端获取AES密钥并缓存，好了此时针对本次的连接,客户端/服务器端均有AES密钥，</p><p>那么后续的通讯数据均通过这个AES密钥进行加密解密。</p><p>*截止到这里整个通讯的加密解密过程就说完了，整理清楚了通讯流程下面的工作就会轻松许多。上面有一些关键词需要稍微了解一下，如不清楚请自行百度。以下规范一下加密算法的各项参数，具体的视项目情况而定。</p><h3 id="规范约定"><a href="#规范约定" class="headerlink" title="规范约定"></a>规范约定</h3><p>1.RSA,密钥长度1024, 填充方式PKCS1,公钥加密，私钥解密，公钥可通过私钥生成</p><p>2.AES使用AES/ECB/PKCS7Padding</p><h4 id="RSA加密"><a href="#RSA加密" class="headerlink" title="RSA加密"></a>RSA加密</h4><p>RSA加密规则:若密钥位数是key_size, 单次加密串的最大长度为 (key_size)/8 - 11, 目前位数1024, 则最大加密长度为117，为了方便这里我们选择一次加密长度为100</p><p>将明文数据分成一个或数个最长100字节的小段进行加密，拼接分段加密数据即为最终的Body加密数据</p><h4 id="RSA解密"><a href="#RSA解密" class="headerlink" title="RSA解密"></a>RSA解密</h4><p>RSA解密同样遵循分段规则，对于1024位密钥, 每小段待解密数据长度为128字节</p><p>将密文数据分成一个或数个128字节长的小段进行解密，拼接分段解密数据即为最终的Body解密数据</p><h4 id="AES加密"><a href="#AES加密" class="headerlink" title="AES加密"></a>AES加密</h4><p>AES加密要求源数据长度必须是16的整数倍, 故需补‘0’对齐后再加密，记录modlen为源数据长度与16取模值</p><p>因加密前有可能对源数据作修改， 故需在加密后的数据尾再增加一个16字节的填充数据块，其最后一个字节赋modlen, 其余字节赋值‘0’， 将加密数据和额外的填充数据块拼接作为最终要发送协议的body数据</p><h4 id="AES解密"><a href="#AES解密" class="headerlink" title="AES解密"></a>AES解密</h4><p>协议body数据, 先将最后一个字节取出，记录modlen， 然后将body截掉尾部16字节填充数据块后再解密（与加密填充额外数据块逻辑对应）</p><p>modlen 为0时，上述解密后的数据即为协议返回的body数据, 否则需截掉尾部(16 - 录modlen)长度的用于填充对齐的数据</p><p>本文演示代码：<a href="https://github.com/fanfq/jprotobuf_sample">https://github.com/fanfq/jprotobuf_sample</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话:&quot;&gt;&lt;/a&gt;写在前面的话:&lt;/h3&gt;&lt;p&gt;之前一篇文章&lt;a href=&quot;https://blog.fanfq.com/%E6%9E%B6%E6%9E%84/netty_protobuf_best_practices&quot;&gt;《Creator WebSocket Protobuf整合之保姆级全攻略》&lt;/a&gt;大概的介绍了下有关protobuf的整合，首先我们认清一点protobuf仅仅是数据封装的模式，并没有加密功能，简单的来说将其理解成增强型json，以便于理解。&lt;/p&gt;
&lt;p&gt;近期也看了一些服务器端的源码，总的来说protobuf算是比较主流的，老点的项目有用json的或者是body是json然后用LengthField加头的。不管如何我个人还是建议使用protobuf，其优势不再赘述了。&lt;/p&gt;
&lt;p&gt;在阅读源码期间，偶然发现baidu的开源项目 [jprotobuf] (&lt;a href=&quot;https://github.com/jhunters/jprotobuf&quot;&gt;https://github.com/jhunters/jprotobuf&lt;/a&gt;) ，其主要的优势就是不需要再编写.proto的文件的直接在pojo类上加上注解即可，一定程度的简化了我们开发的流程提高的开发效率。但我个人观点还是需要.proto文件的，即便没有此文件也需要通过文档的形式列出所有通讯消息的结构体。随时时间的推移项目的迭代以及各种跨平台的客户端的开发，有一份清晰的文档往往事半功倍，这也算是我个人的偏执吧。&lt;/p&gt;</summary>
    
    
    
    <category term="架构" scheme="https://blog.fanfq.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="https://blog.fanfq.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="design" scheme="https://blog.fanfq.com/tags/design/"/>
    
    <category term="netty" scheme="https://blog.fanfq.com/tags/netty/"/>
    
    <category term="protobuf" scheme="https://blog.fanfq.com/tags/protobuf/"/>
    
    <category term="creator" scheme="https://blog.fanfq.com/tags/creator/"/>
    
  </entry>
  
  <entry>
    <title>Cocos Creator WebSocket Protobuf整合之保姆级全攻略</title>
    <link href="https://blog.fanfq.com/%E6%9E%B6%E6%9E%84/netty_protobuf_best_practices.html"/>
    <id>https://blog.fanfq.com/%E6%9E%B6%E6%9E%84/netty_protobuf_best_practices.html</id>
    <published>2020-03-18T10:12:50.000Z</published>
    <updated>2021-09-24T15:59:50.567Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>环境说明：<br>Cocos Creator : 2.3.0 学习的速度赶不上它更新的速度<br>protobuf3 <a href="https://developers.google.com/protocol-buffers/">https://developers.google.com/protocol-buffers/</a><br>protobufjs @6.8.9 <a href="https://github.com/protobufjs/protobuf.js">https://github.com/protobufjs/protobuf.js</a><br>没错，这是目前最新版本。网上一大堆都是老的 v5 版本，对我来说太low。哈哈实际上我仅仅是为了用那该死的 pbts 啦！</p><p>服务器端：<br>websocket + protobuf3 这里就不具体展开说明了，因为此时我对服务器端没有什么兴趣。</p><img src="/uploads/google_protobuf.png" class=""><h3 id="why-google-protobuf"><a href="#why-google-protobuf" class="headerlink" title="why google protobuf?"></a>why google protobuf?</h3><p>我来告诉你，为什么选择protobuf作为网络的封装协议而为什么不用json？</p><p>1.首先我是google的粉丝<br>2.序列化与反序列化效率高于json，相比而言降低了客户端服务器的资源<br>3.传输体积小，对应的降低的数据流量<br>4.数据类型跨平台，这点很重要。也许你不在乎，等你做多客户端的时候就知道了。<br>5.一定程度脱敏，强调一下protobuf没有加密功能，仅仅是二进制难以阅读而已。本文不涉及加密的操作，先给留个坑如果读者有兴趣我会考虑做篇有关RSA,AES加密封装.</p><span id="more"></span><h3 id="protobuf-结构体定义"><a href="#protobuf-结构体定义" class="headerlink" title="protobuf 结构体定义"></a>protobuf 结构体定义</h3><p>1.通常项目早期的时候已经规定好了通讯协议，下面这个协议属于”<strong>万金油</strong>“适用于绝大多数项目，也是我之前做的项目中所采用的协议。</p><span itemprop="image" itemscope itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/uploads/protobuf_struct.png" class="full-image" alt="消息结构体封装协议" title="消息结构体封装协议" /><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>2.通常我还会做一份文档出来，以供其他参与开发的小伙伴使用，类似于这样的</p><table><thead><tr><th align="left">参数</th><th align="center">位数</th><th align="right">字节数</th><th align="right">说明</th></tr></thead><tbody><tr><td align="left">nHeaderFlag</td><td align="center">8*4</td><td align="right">2</td><td align="right">包头起始标志，固定为“FC”</td></tr><tr><td align="left">nProtoID</td><td align="center">8*4</td><td align="right">4</td><td align="right">协议ID</td></tr><tr><td align="left">nProtoFmtType</td><td align="center">8*4</td><td align="right">4</td><td align="right">协议格式类型，0为Protobuf格式，1为Json格式，目前仅支持 0</td></tr><tr><td align="left">nProtoVer</td><td align="center">8*4</td><td align="right">4</td><td align="right">协议版本，用于迭代兼容, 目前填0</td></tr><tr><td align="left">nSerialNo</td><td align="center">8*8</td><td align="right">8</td><td align="right">包序列号，用于对应请求包和回包, 要求递增</td></tr><tr><td align="left">nBodyLen</td><td align="center">8*4</td><td align="right">4</td><td align="right">包体长度</td></tr><tr><td align="left">arrBodySHA1</td><td align="center">8*40</td><td align="right">40</td><td align="right">包体原始数据(解密后)的SHA1哈希值</td></tr><tr><td align="left">arrReserved</td><td align="center">8*20</td><td align="right">20</td><td align="right">保留20字节扩展</td></tr><tr><td align="left">（具体描述封装协议各字段说明）</td><td align="center"></td><td align="right"></td><td align="right"></td></tr></tbody></table><table><thead><tr><th align="left">分类</th><th align="center">协议ID</th><th align="right">Protobuf文件</th><th align="right">C2S</th><th align="right">S2C</th><th align="right">说明</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">1001</td><td align="right"><a href="https://github.com/fanfq/springboot_netty_websocket_protobuffer/blob/master/common/src/main/java/com/fc/common/socket/protobuf/KeepAliveMsg.proto">KeepAliveMsg</a></td><td align="right">ping</td><td align="right">-</td><td align="right">心跳</td></tr><tr><td align="left">1</td><td align="center">1901</td><td align="right"><a href="https://github.com/fanfq/springboot_netty_websocket_protobuffer/blob/master/common/src/main/java/com/fc/common/socket/protobuf/KeepAliveMsg.proto">KeepAliveMsg</a></td><td align="right">-</td><td align="right">pong</td><td align="right">心跳</td></tr><tr><td align="left">（原生的.proto 文件说明，以便维护）</td><td align="center"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr></tbody></table><p>3.以KeepAliveMsg.proto为例说明</p><p>ProtoID.proto 一个公用的枚举类型以便管理协议编号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">syntax =<span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"><span class="comment">//消息头</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">MsgType</span></span>&#123;</span><br><span class="line">    DEF = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//keepalive</span></span><br><span class="line">    PING = <span class="number">1001</span>;</span><br><span class="line">    PONG = <span class="number">1901</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>KeepAliveMsg.proto 心跳包协议体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">syntax =<span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line">message C2S</span><br><span class="line">&#123;</span><br><span class="line">    int64 timestamp = <span class="number">1</span>; <span class="comment">//时间戳</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message S2C</span><br><span class="line">&#123;</span><br><span class="line">    int64 timestamp = <span class="number">1</span>; <span class="comment">//时间戳</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message C2SMsg  <span class="comment">//Request</span></span><br><span class="line">&#123;</span><br><span class="line">    C2S c2s = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message S2CMsg  <span class="comment">//Response</span></span><br><span class="line">&#123;</span><br><span class="line">    int32 code = <span class="number">1</span>;</span><br><span class="line">    string msg = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    S2C s2c = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="creator-整合-protobufjs"><a href="#creator-整合-protobufjs" class="headerlink" title="creator 整合 protobufjs"></a>creator 整合 protobufjs</h3><p>好了，截止到这里和我们cocos creator 不相关的东西准备结束了。下面我们来说说creator该做哪些骚操作呢。</p><span itemprop="image" itemscope itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/uploads/protobufjs.png" class="full-image" alt="消息结构体封装协议" /><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>上面说了google protobuf这里又来个protobuf.js又是什么鬼？</p><p>这个鬼呢，管他什么鬼，我没耐心写了，先将就的写着吧。总之就是在creator中使用protobuf的一个插件针对js, ts 语言环境.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install protobufjs</span><br></pre></td></tr></table></figure><p>安装完成后在安装目录下找到 <code>/Users/fred/node_modules/protobufjs/dist/protobuf.js</code> 将其复制到creator的工程中，然后选择以控件的方式导入。</p><p>同时它主要的目的呢就是将.proto的文件转换成.js（**<span class="label danger">pbjs</span><strong>）,以及将其生成出来的.js转换成.d.ts(</strong><span class="label danger">pbts</span>**)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pbjs -t <span class="keyword">static</span>-<span class="keyword">module</span> -w commonjs -o compiled.js ProtoID.proto KeepAliveMsg.proto</span><br><span class="line">pbts -o compiled.d.ts compiled.js</span><br></pre></td></tr></table></figure><p>此时我们就生成出了 compiled.d.ts compiled.js 这两个文件，也将其复制到creator工程中，其中修改下compiled.js如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var $protobuf = require(&quot;protobufjs/minimal&quot;);</span></span><br><span class="line"><span class="keyword">var</span> $protobuf = protobuf;</span><br></pre></td></tr></table></figure><span itemprop="image" itemscope itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/uploads/ccc.png" class="full-image" alt="消息结构体封装协议" /><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p>好，截止到这里。基本上就完成了protobuf的支持的，剩下的工作就是开始怼代码了！</p><p>写到这里，我有点不想写了，以后再更新吧！</p><p>//todo: creator 中如何通过protobuf.js 进行序列化与反序列化，以及自定义头的解析。</p><p>2020-03-18更新</p><p>1.开始各种封装以及代码的调用与实现，大概的介绍下代码清单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-script (项目工程的脚本目录)</span><br><span class="line">    |_ protobuf (存放protobuf相关目录)</span><br><span class="line">        |_compiled.js (pbjs 编译出来的 .js 文件)</span><br><span class="line">        |_compiled.d.ts (pbts 编译出来的 .d.ts 文件)</span><br><span class="line">        |_protobuf.js (导入的插件)</span><br><span class="line">        |_bean (存放封装类相关目录)</span><br><span class="line">            |_FCDecoder.ts  （arraybuf 消息头解码）</span><br><span class="line">            |_FCEncoder.ts  （arraybuf 消息头编码）</span><br><span class="line">            |_FCHeader.ts （封装的消息头对象）</span><br><span class="line">            |_FCMsg.ts （封装的消息对象）</span><br></pre></td></tr></table></figure><h3 id="工程示例源码"><a href="#工程示例源码" class="headerlink" title="工程示例源码"></a>工程示例源码</h3><p>以下是工程示例，代码我就不帖了，具体的看工程源码<br><code>https://github.com/fanfq/springboot_netty_websocket_protobuffer</code></p><h3 id="大概的总结一下"><a href="#大概的总结一下" class="headerlink" title="大概的总结一下"></a>大概的总结一下</h3><p>作为初学creator的人来说，creator的生态并没有我想的那么好，总体而言还处于初级阶段，相当一部分大佬是从cocos2dx转过来的，相对而言他们的学习门槛更低更易于上手，就我个人而言特别针对ts语法可能有些地方用不太恰当，不过暂时没有关系，先这么滴。后续慢慢改善，加油！</p><p>有关网络相关的今天是我学习的第三天，基本的网络通讯http,websocket都已经整明白了，而且在native上测试也是通过的。后期再稍微看下有关证书的配置，应该问题不大。</p><p>下面的计划我准备开始学习下UI相关的控件了，之前写了个demo大概的了解下layout，button，label，widget …等基本的控件使用。可能游戏开发中会用到很多的自定义的控件，暂时还没有接触到。</p><p>还有就是基本的物理引擎做个大概的了解，我估计用不到，如果是网游的话碰撞大概率我会写在服务器端。其他的相关的先做个了解的！</p><p>我们又可以愉快的玩耍了！</p><p>一天到晚的，别老想着白嫖！</p><p>老铁要不要关注一下呢？</p><p>写在最后，本人不提供疑难杂症的检查，岁数有点大了，人有点懒了！谢谢！！</p><p>peace&amp;love</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;环境说明：&lt;br&gt;Cocos Creator : 2.3.0 学习的速度赶不上它更新的速度&lt;br&gt;protobuf3 &lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot;&gt;https://developers.google.com/protocol-buffers/&lt;/a&gt;&lt;br&gt;protobufjs @6.8.9 &lt;a href=&quot;https://github.com/protobufjs/protobuf.js&quot;&gt;https://github.com/protobufjs/protobuf.js&lt;/a&gt;&lt;br&gt;没错，这是目前最新版本。网上一大堆都是老的 v5 版本，对我来说太low。哈哈实际上我仅仅是为了用那该死的 pbts 啦！&lt;/p&gt;
&lt;p&gt;服务器端：&lt;br&gt;websocket + protobuf3 这里就不具体展开说明了，因为此时我对服务器端没有什么兴趣。&lt;/p&gt;
&lt;img src=&quot;/uploads/google_protobuf.png&quot; class=&quot;&quot;&gt;

&lt;h3 id=&quot;why-google-protobuf&quot;&gt;&lt;a href=&quot;#why-google-protobuf&quot; class=&quot;headerlink&quot; title=&quot;why google protobuf?&quot;&gt;&lt;/a&gt;why google protobuf?&lt;/h3&gt;&lt;p&gt;我来告诉你，为什么选择protobuf作为网络的封装协议而为什么不用json？&lt;/p&gt;
&lt;p&gt;1.首先我是google的粉丝&lt;br&gt;2.序列化与反序列化效率高于json，相比而言降低了客户端服务器的资源&lt;br&gt;3.传输体积小，对应的降低的数据流量&lt;br&gt;4.数据类型跨平台，这点很重要。也许你不在乎，等你做多客户端的时候就知道了。&lt;br&gt;5.一定程度脱敏，强调一下protobuf没有加密功能，仅仅是二进制难以阅读而已。本文不涉及加密的操作，先给留个坑如果读者有兴趣我会考虑做篇有关RSA,AES加密封装.&lt;/p&gt;</summary>
    
    
    
    <category term="架构" scheme="https://blog.fanfq.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="https://blog.fanfq.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="design" scheme="https://blog.fanfq.com/tags/design/"/>
    
    <category term="netty" scheme="https://blog.fanfq.com/tags/netty/"/>
    
    <category term="protobuf" scheme="https://blog.fanfq.com/tags/protobuf/"/>
    
    <category term="creator" scheme="https://blog.fanfq.com/tags/creator/"/>
    
  </entry>
  
  <entry>
    <title>基于mongodb信息流数据存储设计</title>
    <link href="https://blog.fanfq.com/mongodb/%E5%9F%BA%E4%BA%8Emongodb%E4%BF%A1%E6%81%AF%E6%B5%81%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E8%AE%BE%E8%AE%A1.html"/>
    <id>https://blog.fanfq.com/mongodb/%E5%9F%BA%E4%BA%8Emongodb%E4%BF%A1%E6%81%AF%E6%B5%81%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E8%AE%BE%E8%AE%A1.html</id>
    <published>2018-11-27T04:13:43.000Z</published>
    <updated>2021-09-24T15:59:50.566Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>以微信朋友圈为例，当打开朋友圈的时候默认刷新最新的数据，数据流以时间倒序排序。那么这样的数据表现形式我们称之为<code>时间线</code>。需要注意的是<br>我们定义时间线的起始时间为账户的创建的时间，例如，A是B的粉丝，B账号创建时间为2018年10月1日，而A账户的创建时间为2018年11月1日则在A的时间线只可以看到2018年11月1日以后的数据。而B的时间线则是2018年10月1日开始往后的数据。也就是说我们以账号的创建时间为锚点。</p><span id="more"></span><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>用户A是B的粉丝，则A订阅了B，B发布朋友圈则推送给A。</p><img src="/uploads/WX20181120-pubsub.png" class=""><p>如上图所示，我们整理了一下订阅者关系如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A (3)</span><br><span class="line">-&gt; E</span><br><span class="line">-&gt; F</span><br><span class="line">-&gt; C</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="以空间换时间的存储方案"><a href="#以空间换时间的存储方案" class="headerlink" title="以空间换时间的存储方案"></a>以空间换时间的存储方案</h2><p>写入效率低，数据允余占用存储空间，读取效率高。</p><img src="/uploads/WX20181127-091310.png" class=""><p>首先基于时间线而言，每个用户都有属于自己的一块存储区域，关联数据在写数据时完成。<br>如A发布朋友圈，会将此条记录分别写入 <code>A</code>,<code>E</code>,<code>F</code>,<code>C</code> 的时间线存储区域，每个用户只要获取属于自己的数据即可，相当程度的提高了读取效率。但是此方案将会出现大量的数据允余，这里也就是我们所说的以空间换时间的存储方案，如果此例中A有100万的粉丝，这消息副本需要100万份，即便其中大部分数据从未被读取但是这100万的存储空间是实实在在存在的，而且写数据时也会消耗一定的资源。所以这里也引用的消息序列的方案，将耗时的处理通过队列的方式处理。<br>针对社交关系需要注意一下，<code>E</code>取消对<code>A</code>的关注，只需要将<code>E</code>时间线上的有关<code>A</code>的数据清空掉，同理如果<code>E</code>关注<code>A</code>则需要将<code>A</code>时间线的数据拷贝一份存入<code>E</code>的时间线上。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;以微信朋友圈为例，当打开朋友圈的时候默认刷新最新的数据，数据流以时间倒序排序。那么这样的数据表现形式我们称之为&lt;code&gt;时间线&lt;/code&gt;。需要注意的是&lt;br&gt;我们定义时间线的起始时间为账户的创建的时间，例如，A是B的粉丝，B账号创建时间为2018年10月1日，而A账户的创建时间为2018年11月1日则在A的时间线只可以看到2018年11月1日以后的数据。而B的时间线则是2018年10月1日开始往后的数据。也就是说我们以账号的创建时间为锚点。&lt;/p&gt;</summary>
    
    
    
    <category term="架构" scheme="https://blog.fanfq.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="https://blog.fanfq.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="mongodb" scheme="https://blog.fanfq.com/tags/mongodb/"/>
    
    <category term="design" scheme="https://blog.fanfq.com/tags/design/"/>
    
  </entry>
  
  <entry>
    <title>基于mongodb用户评论系统数据结构设计</title>
    <link href="https://blog.fanfq.com/mongodb/%E5%9F%BA%E4%BA%8Emongodb%E7%94%A8%E6%88%B7%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1.html"/>
    <id>https://blog.fanfq.com/mongodb/%E5%9F%BA%E4%BA%8Emongodb%E7%94%A8%E6%88%B7%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1.html</id>
    <published>2018-11-27T04:13:43.000Z</published>
    <updated>2021-09-24T15:59:50.567Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>以微信朋友圈为例，但又与微信不同是微信是以强社交为主，只有好友之间才可以查阅对方的朋友圈内容，而我们当前的设计类似的微博以弱社交的表现形式，其显著特点就是即便互相没有关注也可以访问对方的朋友圈数据。所以设计之初首先要确认应用场景是<code>强社交</code>，还是<code>弱社交</code>关系。</p><span id="more"></span><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>基于timeline的用户留言与点赞</p><img src="/uploads/WX20181127-121621.png" class=""><h3 id="信息流"><a href="#信息流" class="headerlink" title="信息流"></a>信息流</h3><p>注意事项，<code>AREA1</code>,<code>AREA2</code>分别是两块SCHEMA分别存储在mongodb中，本文的重点也是根据实际示例探讨这两块SCHEMA的存储结构。</p><p><code>1</code>. 系统所有的时间均是timestamp long类型，时间间隔24小时之内均显示（xx小时之前），如1小时27分钟前则显示（1小时前）;间隔1小时内则显示（xx分钟前）;不足1分钟则显示（刚刚）。该时间算法由客户端自己完成，服务器端只提供创建时间，默认时区为UTC+8.<br><code>2</code>. 用户显示上报设备型号，则显示该记录。有可能用户上包的设备型号是（oneplus a6000）则显示为（一加 6，或者 oneplus 6）所以设备型号要后台维护。<br><code>3</code>.点赞，延迟3秒与服务器同步，可取消点赞。点赞成功图标高亮显示，不影响数据同步。无人点赞数字区域显示<code>赞</code><br><code>4</code>.留言总数，无人留言显示<code>回复</code><br><code>5</code>.默认值显示3-5条最新的留言记录。支持emoji字符存储。点击<code>4</code>，<code>5</code>则进入留言详细列表</p><h3 id="留言列表"><a href="#留言列表" class="headerlink" title="留言列表"></a>留言列表</h3><p>注意事项，分页显示数据，处理好同步机制。<br><code>A</code>.同<code>1</code><br><code>B</code>.同<code>3</code><br><code>C</code>.这条记录用于张三回复了李四<br><code>D</code>.王五的这条留言被2人点赞其中含当前用户，则高亮显示点赞图标。但无人回复<br><code>E</code>.钱七回复了麻六，则麻六的回复标签上有回复记录的总数。<br><code>F</code>.回复主贴</p><img src="/uploads/WX20181127-121620.png" class=""><p>键盘由点击具体事件后弹出，如先点击<code>1</code>,<code>A</code>,输入框提示回复主体。</p><h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><p><code>1</code>.直接评论主贴</p><h3 id="回复"><a href="#回复" class="headerlink" title="回复"></a>回复</h3><p><code>A</code>.回复他人留言</p><h2 id="存储方案"><a href="#存储方案" class="headerlink" title="存储方案"></a>存储方案</h2><p>写入效率低，数据允余占用存储空间，读取效率高。</p><h3 id="基于redis"><a href="#基于redis" class="headerlink" title="基于redis"></a>基于redis</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">new post:</span><br><span class="line">&#123;post category&#125;:&#123;author id&#125;:&#123;post id&#125;</span><br><span class="line">朋友圈:123:67890</span><br><span class="line">uid为123的用户发布朋友圈该条记录id为67890</span><br><span class="line"></span><br><span class="line">new reply:</span><br><span class="line">&#123;post category&#125;:&#123;author id&#125;:&#123;post id&#125;:reply:&#123;uid&#125;:&#123;reply post id&#125; </span><br><span class="line">朋友圈:123:67890:reply:852:741052</span><br><span class="line">uid为852的用户回复‘uid为123的用户发布朋友圈id为67890&#x27;。该条记录id为741052</span><br><span class="line"></span><br><span class="line">new reply @ user:</span><br><span class="line">&#123;post category&#125;:&#123;uid&#125;:&#123;postid&#125;:replyto:&#123;uid&#125;:to:&#123;uid&#125;:&#123;replyto post id&#125; </span><br><span class="line">朋友圈:123:67890:replyto:852:to:963:7895412</span><br><span class="line">uid为852的用户回复uid为963的用户，在‘uid为123的用户发布朋友圈id为67890&#x27;记录下。该条记录id为7895412</span><br><span class="line"></span><br><span class="line">new like base one post:</span><br><span class="line">like:&#123;post id&#125;:&#123;uid&#125;:&#123;like id&#125; 点赞</span><br><span class="line">like:67890:915:731564 </span><br><span class="line">uid为915的用户点赞了postid为67890的文章，该条记录id为731564 </span><br><span class="line"></span><br><span class="line">更多操作</span><br><span class="line"></span><br><span class="line">获取uid为123的所发朋友圈所有内容</span><br><span class="line">朋友圈:123:*</span><br><span class="line"></span><br><span class="line">获取朋友圈文章id为264832的所有点赞记录</span><br><span class="line">like:264832:*</span><br><span class="line"></span><br><span class="line">获取朋友圈文章id为264832的所有回复记录</span><br><span class="line">朋友圈:*:264832:reply* （含用户间的回复）</span><br><span class="line">朋友圈:*:264832:reply:* （不含用户间的回复）</span><br><span class="line">朋友圈:*:264832:replyto:* （仅含用户间的回复）</span><br><span class="line"></span><br><span class="line">获取UID为123朋友圈文章id为264832的所有回复记录</span><br><span class="line">朋友圈:123:264832:reply* （含用户间的回复）</span><br><span class="line">朋友圈:123:264832:reply:* （不含用户间的回复）</span><br><span class="line">朋友圈:123:264832:replyto:* （仅含用户间的回复）</span><br><span class="line"></span><br><span class="line">key-value</span><br><span class="line">AREA 1</span><br><span class="line">article:&#123;uid&#125;:&#123;postid&#125; 发布动态</span><br><span class="line"></span><br><span class="line">AREA 2</span><br><span class="line">article:&#123;uid&#125;:&#123;postid&#125;:reply:&#123;uid&#125;:&#123;postid&#125; 回复主题帖</span><br><span class="line">article:&#123;uid&#125;:&#123;postid&#125;:replyto:&#123;uid&#125;:to:&#123;uid&#125;:&#123;postid&#125; 在这个主题帖下面回复某人</span><br><span class="line"></span><br><span class="line">基于postid点赞</span><br><span class="line">like:&#123;postid&#125;:&#123;uid&#125;:&#123;likeid&#125; 点赞</span><br></pre></td></tr></table></figure><h3 id="基于mongodb"><a href="#基于mongodb" class="headerlink" title="基于mongodb"></a>基于mongodb</h3><img src="/uploads/WX20181128-125100.png" class=""><h2 id="示例详解"><a href="#示例详解" class="headerlink" title="示例详解"></a>示例详解</h2><h4 id="服务器返回数据"><a href="#服务器返回数据" class="headerlink" title="服务器返回数据"></a>服务器返回数据</h4><p>API的设计原则是尽可能的将能一次返回所需要的所有数据，从而减少与服务器间的交互。而我们在存储的时候也不太可能将动态数据直接存储持久化。一旦数据结构改变变动会比较大，从而适当的设计关联关系有助于简化业务逻辑充分的利用mongodb高性能特性。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;category&quot;</span>:<span class="string">&quot;PICTURE&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;content&quot;</span>:<span class="string">&quot;这是一个带9张图片的动态&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;createtime&quot;</span>:<span class="number">1543374370935</span>,</span><br><span class="line">   <span class="attr">&quot;id&quot;</span>:<span class="number">90012</span>,</span><br><span class="line">   <span class="attr">&quot;likeCount&quot;</span>:<span class="number">3</span>,</span><br><span class="line">   <span class="attr">&quot;commentCount&quot;</span>:<span class="number">9</span>,</span><br><span class="line">   <span class="attr">&quot;device&quot;</span>:<span class="string">&quot;红米 6&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;geo&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">   <span class="attr">&quot;author&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;headImg&quot;</span>:<span class="string">&quot;http://cdnhost/headimg/91d192886a5b9f3e14b6ffa1a674b55d.jpg&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;nickName&quot;</span>:<span class="string">&quot;王五&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;uid&quot;</span>:<span class="number">10003</span></span><br><span class="line">   &#125;,   </span><br><span class="line">   <span class="attr">&quot;pictureUrls&quot;</span>:[</span><br><span class="line">      <span class="string">&quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d11.jpg&quot;</span>,</span><br><span class="line">      <span class="string">&quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d12.jpg&quot;</span>,</span><br><span class="line">      <span class="string">&quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d13.jpg&quot;</span>,</span><br><span class="line">      <span class="string">&quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d14.jpg&quot;</span>,</span><br><span class="line">      <span class="string">&quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d15.png&quot;</span>,</span><br><span class="line">      <span class="string">&quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d16.png&quot;</span>,</span><br><span class="line">      <span class="string">&quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d17.png&quot;</span>,</span><br><span class="line">      <span class="string">&quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d18.png&quot;</span>,</span><br><span class="line">      <span class="string">&quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d19.png&quot;</span>,</span><br><span class="line">      <span class="string">&quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d10.png&quot;</span></span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">&quot;comments&quot;</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">&quot;author&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;headImg&quot;</span>:<span class="string">&quot;http://cdnhost/headimg/5fdd5874ff6d571e6d0abac9660ec81f.jpg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;nickName&quot;</span>:<span class="string">&quot;麻子&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;uid&quot;</span>:<span class="number">10004</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">&quot;commentCount&quot;</span>:<span class="number">0</span>,</span><br><span class="line">         <span class="attr">&quot;content&quot;</span>:<span class="string">&quot;这是一个回复678ijnfdsf&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;createtime&quot;</span>:<span class="number">1543374600935</span>,</span><br><span class="line">         <span class="attr">&quot;id&quot;</span>:<span class="number">500013</span>,</span><br><span class="line">         <span class="attr">&quot;likeCount&quot;</span>:<span class="number">0</span>,</span><br><span class="line">         <span class="attr">&quot;postId&quot;</span>:<span class="number">90012</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">&quot;author&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;headImg&quot;</span>:<span class="string">&quot;http://cdnhost/headimg/5fdd5874ff6d571e6d0abac9660ec81f.jpg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;nickName&quot;</span>:<span class="string">&quot;麻子&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;uid&quot;</span>:<span class="number">10004</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">&quot;commentCount&quot;</span>:<span class="number">0</span>,</span><br><span class="line">         <span class="attr">&quot;content&quot;</span>:<span class="string">&quot;这是一个回复678ijnfdsf&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;createtime&quot;</span>:<span class="number">1543374500935</span>,</span><br><span class="line">         <span class="attr">&quot;id&quot;</span>:<span class="number">500012</span>,</span><br><span class="line">         <span class="attr">&quot;likeCount&quot;</span>:<span class="number">0</span>,</span><br><span class="line">         <span class="attr">&quot;postId&quot;</span>:<span class="number">90012</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">&quot;author&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;headImg&quot;</span>:<span class="string">&quot;http://cdnhost/headimg/01f8cc1938c30b28b1e80d256faddd84.jpg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;nickName&quot;</span>:<span class="string">&quot;听他们说玩游戏名字起得不能太长&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;uid&quot;</span>:<span class="number">10005</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">&quot;commentCount&quot;</span>:<span class="number">0</span>,</span><br><span class="line">         <span class="attr">&quot;content&quot;</span>:<span class="string">&quot;这是一个回复678ijnfdsf&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;createtime&quot;</span>:<span class="number">1543374700935</span>,</span><br><span class="line">         <span class="attr">&quot;id&quot;</span>:<span class="number">500011</span>,</span><br><span class="line">         <span class="attr">&quot;likeCount&quot;</span>:<span class="number">0</span>,</span><br><span class="line">         <span class="attr">&quot;postId&quot;</span>:<span class="number">90012</span></span><br><span class="line">      &#125;</span><br><span class="line">   ],   </span><br><span class="line">   <span class="attr">&quot;likes&quot;</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">&quot;createTime&quot;</span>:<span class="number">1543375480935</span>,</span><br><span class="line">         <span class="attr">&quot;id&quot;</span>:<span class="number">882211</span>,</span><br><span class="line">         <span class="attr">&quot;postId&quot;</span>:<span class="number">90012</span>,</span><br><span class="line">         <span class="attr">&quot;user&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;headImg&quot;</span>:<span class="string">&quot;http://cdnhost/headimg/e1ea32968eb094232f74b712017e5d14.jpg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;nickName&quot;</span>:<span class="string">&quot;李四&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;uid&quot;</span>:<span class="number">10002</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">&quot;createTime&quot;</span>:<span class="number">1543375590935</span>,</span><br><span class="line">         <span class="attr">&quot;id&quot;</span>:<span class="number">882212</span>,</span><br><span class="line">         <span class="attr">&quot;postId&quot;</span>:<span class="number">90012</span>,</span><br><span class="line">         <span class="attr">&quot;user&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;headImg&quot;</span>:<span class="string">&quot;http://cdnhost/headimg/5fdd5874ff6d571e6d0abac9660ec81f.jpg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;nickName&quot;</span>:<span class="string">&quot;麻子&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;uid&quot;</span>:<span class="number">10004</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">&quot;createTime&quot;</span>:<span class="number">1543375700935</span>,</span><br><span class="line">         <span class="attr">&quot;id&quot;</span>:<span class="number">882214</span>,</span><br><span class="line">         <span class="attr">&quot;postId&quot;</span>:<span class="number">90012</span>,</span><br><span class="line">         <span class="attr">&quot;user&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;headImg&quot;</span>:<span class="string">&quot;http://cdnhost/headimg/5fdd5874ff6d571e6d0abac9660ec81f.jpg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;nickName&quot;</span>:<span class="string">&quot;麻子&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;uid&quot;</span>:<span class="number">10004</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AREA1-模块"><a href="#AREA1-模块" class="headerlink" title="AREA1 模块"></a>AREA1 模块</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&quot;category&quot;:&quot;PICTURE&quot;,</span><br><span class="line">   &quot;content&quot;:&quot;这是一个带9张图片的动态&quot;,</span><br><span class="line">   &quot;createtime&quot;:1543374370935,</span><br><span class="line">   &quot;id&quot;:90012,</span><br><span class="line">   &quot;likeCount&quot;:3,</span><br><span class="line">   &quot;commentCount&quot;:9,</span><br><span class="line">   &quot;device&quot;:&quot;红米 6&quot;,</span><br><span class="line">   &quot;geo&quot;:null,</span><br><span class="line">   &quot;author&quot;:&#123;</span><br><span class="line">      &quot;headImg&quot;:&quot;http://cdnhost/headimg/91d192886a5b9f3e14b6ffa1a674b55d.jpg&quot;,</span><br><span class="line">      &quot;nickName&quot;:&quot;王五&quot;,</span><br><span class="line">      &quot;uid&quot;:10003</span><br><span class="line">   &#125;,   </span><br><span class="line">   &quot;pictureUrls&quot;:[</span><br><span class="line">      &quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d11.jpg&quot;,</span><br><span class="line">      &quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d12.jpg&quot;,</span><br><span class="line">      &quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d13.jpg&quot;,</span><br><span class="line">      &quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d14.jpg&quot;,</span><br><span class="line">      &quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d15.png&quot;,</span><br><span class="line">      &quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d16.png&quot;,</span><br><span class="line">      &quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d17.png&quot;,</span><br><span class="line">      &quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d18.png&quot;,</span><br><span class="line">      &quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d19.png&quot;,</span><br><span class="line">      &quot;http://cdnhost/pic/e1ea32968eb094232f74b712017e5d10.png&quot;</span><br><span class="line">   ],</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure><h4 id="AREA2-comments-模块"><a href="#AREA2-comments-模块" class="headerlink" title="AREA2 comments 模块"></a>AREA2 comments 模块</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&quot;comments&quot;:[</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;author&quot;:&#123;</span><br><span class="line">            &quot;headImg&quot;:&quot;http://cdnhost/headimg/5fdd5874ff6d571e6d0abac9660ec81f.jpg&quot;,</span><br><span class="line">            &quot;nickName&quot;:&quot;麻子&quot;,</span><br><span class="line">            &quot;uid&quot;:10004</span><br><span class="line">         &#125;,</span><br><span class="line">         &quot;commentCount&quot;:0,</span><br><span class="line">         &quot;content&quot;:&quot;这是一个回复678ijnfdsf&quot;,</span><br><span class="line">         &quot;createtime&quot;:1543374600935,</span><br><span class="line">         &quot;id&quot;:500013,</span><br><span class="line">         &quot;likeCount&quot;:0,</span><br><span class="line">         &quot;postId&quot;:90012</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;author&quot;:&#123;</span><br><span class="line">            &quot;headImg&quot;:&quot;http://cdnhost/headimg/5fdd5874ff6d571e6d0abac9660ec81f.jpg&quot;,</span><br><span class="line">            &quot;nickName&quot;:&quot;麻子&quot;,</span><br><span class="line">            &quot;uid&quot;:10004</span><br><span class="line">         &#125;,</span><br><span class="line">         &quot;commentCount&quot;:0,</span><br><span class="line">         &quot;content&quot;:&quot;这是一个回复678ijnfdsf&quot;,</span><br><span class="line">         &quot;createtime&quot;:1543374500935,</span><br><span class="line">         &quot;id&quot;:500012,</span><br><span class="line">         &quot;likeCount&quot;:0,</span><br><span class="line">         &quot;postId&quot;:90012</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         &quot;author&quot;:&#123;</span><br><span class="line">            &quot;headImg&quot;:&quot;http://cdnhost/headimg/01f8cc1938c30b28b1e80d256faddd84.jpg&quot;,</span><br><span class="line">            &quot;nickName&quot;:&quot;听他们说玩游戏名字起得不能太长&quot;,</span><br><span class="line">            &quot;uid&quot;:10005</span><br><span class="line">         &#125;,</span><br><span class="line">         &quot;commentCount&quot;:0,</span><br><span class="line">         &quot;content&quot;:&quot;这是一个回复678ijnfdsf&quot;,</span><br><span class="line">         &quot;createtime&quot;:1543374700935,</span><br><span class="line">         &quot;id&quot;:500011,</span><br><span class="line">         &quot;likeCount&quot;:0,</span><br><span class="line">         &quot;postId&quot;:90012</span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">   ]</span><br></pre></td></tr></table></figure><h4 id="AREA2-comments-模块存储优化"><a href="#AREA2-comments-模块存储优化" class="headerlink" title="AREA2 comments 模块存储优化"></a>AREA2 comments 模块存储优化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;comments_postid&quot;:[</span><br><span class="line">500013,</span><br><span class="line">500012,</span><br><span class="line">500011,</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="AREA2-likes-模块"><a href="#AREA2-likes-模块" class="headerlink" title="AREA2 likes 模块"></a>AREA2 likes 模块</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&quot;likes&quot;:[</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;createTime&quot;:1543375480935,</span><br><span class="line">      &quot;id&quot;:882211,</span><br><span class="line">      &quot;postId&quot;:90012,</span><br><span class="line">      &quot;user&quot;:&#123;</span><br><span class="line">         &quot;headImg&quot;:&quot;http://cdnhost/headimg/e1ea32968eb094232f74b712017e5d14.jpg&quot;,</span><br><span class="line">         &quot;nickName&quot;:&quot;李四&quot;,</span><br><span class="line">         &quot;uid&quot;:10002</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;createTime&quot;:1543375590935,</span><br><span class="line">      &quot;id&quot;:882212,</span><br><span class="line">      &quot;postId&quot;:90012,</span><br><span class="line">      &quot;user&quot;:&#123;</span><br><span class="line">         &quot;headImg&quot;:&quot;http://cdnhost/headimg/5fdd5874ff6d571e6d0abac9660ec81f.jpg&quot;,</span><br><span class="line">         &quot;nickName&quot;:&quot;麻子&quot;,</span><br><span class="line">         &quot;uid&quot;:10004</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;createTime&quot;:1543375700935,</span><br><span class="line">      &quot;id&quot;:882214,</span><br><span class="line">      &quot;postId&quot;:90012,</span><br><span class="line">      &quot;user&quot;:&#123;</span><br><span class="line">         &quot;headImg&quot;:&quot;http://cdnhost/headimg/5fdd5874ff6d571e6d0abac9660ec81f.jpg&quot;,</span><br><span class="line">         &quot;nickName&quot;:&quot;麻子&quot;,</span><br><span class="line">         &quot;uid&quot;:10004</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="AREA2-likes-模块存储优化"><a href="#AREA2-likes-模块存储优化" class="headerlink" title="AREA2 likes 模块存储优化"></a>AREA2 likes 模块存储优化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;likes_postid&quot;:[</span><br><span class="line">882211,</span><br><span class="line">882212,</span><br><span class="line">882214,</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="最终的储存结构"><a href="#最终的储存结构" class="headerlink" title="最终的储存结构"></a>最终的储存结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;category&quot;:&quot;PICTURE&quot;,</span><br><span class="line">   &quot;content&quot;:&quot;这是一个带9张图片的动态&quot;,</span><br><span class="line">   &quot;createtime&quot;:1543374370935,</span><br><span class="line">   &quot;id&quot;:90012,</span><br><span class="line">   &quot;likeCount&quot;:3,</span><br><span class="line">   &quot;commentCount&quot;:9,</span><br><span class="line">   &quot;device&quot;:&quot;红米 6&quot;,</span><br><span class="line">   &quot;geo&quot;:null,</span><br><span class="line">   &quot;author_uid&quot;:10003,</span><br><span class="line">   &quot;comments_postid&quot;:[</span><br><span class="line">      500013,</span><br><span class="line">      500012,</span><br><span class="line">      500011,</span><br><span class="line">      ...</span><br><span class="line">   ],</span><br><span class="line">   &quot;likes_postid&quot;:[</span><br><span class="line">      882211,</span><br><span class="line">      882212,</span><br><span class="line">      882214,</span><br><span class="line">      ...</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><p>2018.11.29<br>补充一下。<code>likeCount</code> <code>commentCount</code> 是实时计算的出来的，而不是持久化在mongodb中。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;以微信朋友圈为例，但又与微信不同是微信是以强社交为主，只有好友之间才可以查阅对方的朋友圈内容，而我们当前的设计类似的微博以弱社交的表现形式，其显著特点就是即便互相没有关注也可以访问对方的朋友圈数据。所以设计之初首先要确认应用场景是&lt;code&gt;强社交&lt;/code&gt;，还是&lt;code&gt;弱社交&lt;/code&gt;关系。&lt;/p&gt;</summary>
    
    
    
    <category term="架构" scheme="https://blog.fanfq.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="https://blog.fanfq.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="mongodb" scheme="https://blog.fanfq.com/tags/mongodb/"/>
    
    <category term="design" scheme="https://blog.fanfq.com/tags/design/"/>
    
  </entry>
  
  <entry>
    <title>rabbitmq quick setup for ubuntu</title>
    <link href="https://blog.fanfq.com/%E6%9E%B6%E6%9E%84/rabbitmq_quick_setup.html"/>
    <id>https://blog.fanfq.com/%E6%9E%B6%E6%9E%84/rabbitmq_quick_setup.html</id>
    <published>2018-11-16T04:13:43.000Z</published>
    <updated>2021-09-24T15:59:50.566Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#install</span><br><span class="line">echo &quot;deb https://dl.bintray.com/rabbitmq/debian xenial main&quot; | sudo tee /etc/apt/sources.list.d/bintray.rabbitmq.list</span><br><span class="line">wget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -</span><br><span class="line">sudo apt-get install rabbitmq-server</span><br><span class="line"></span><br><span class="line">#service start</span><br><span class="line">service rabbitmq-server start</span><br><span class="line">sudo service rabbitmq-server status</span><br><span class="line"></span><br><span class="line">#web admin</span><br><span class="line">sudo rabbitmq-plugins enable rabbitmq_management</span><br><span class="line">#login by guest</span><br><span class="line">127.0.0.1:15672 guest guest</span><br><span class="line"></span><br><span class="line">#new user</span><br><span class="line">sudo rabbitmqctl add_user fanfq fanfq</span><br><span class="line">sudo rabbitmqctl set_user_tags fanfq administrator</span><br></pre></td></tr></table></figure><p>如果是服务器安装，客户端是没法通过guest用户登录的，则需要创建一个新的用户并赋予admin权限，后续的操作均可通过网页管理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="架构" scheme="https://blog.fanfq.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="https://blog.fanfq.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="服务器" scheme="https://blog.fanfq.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="集群" scheme="https://blog.fanfq.com/tags/%E9%9B%86%E7%BE%A4/"/>
    
    <category term="rabbitmq" scheme="https://blog.fanfq.com/tags/rabbitmq/"/>
    
  </entry>
  
</feed>
